; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: armcc [4d3621]
; commandline armcc [--c99 --list --split_sections --debug -c --asm --interleave -o..\Output\sc32f1xxx_ledpwm.o --asm_dir=..\List --list_dir=..\List --cpu=Cortex-M0+ --apcs=interwork -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -DSC32f10xx -D__UVISION_VERSION=536 ..\FWLib\SC32F1XXX_Lib\src\sc32f1xxx_ledpwm.c]
                          THUMB
                          AREA ||i.LEDPWM_ClearFlag||, CODE, READONLY, ALIGN=2
                  LEDPWM_ClearFlag PROC
;;;480     */
;;;481    void LEDPWM_ClearFlag ( uint16_t LEDPWM_FLAG )
000000  4901              LDR      r1,|L1.8|
;;;482    {
;;;483        
;;;484        assert_param ( IS_GET_LEDPWM_FLAG ( LEDPWM_FLAG ) );
;;;485    
;;;486        
;;;487        LEDPWM->LEDPWM_STS = ( uint16_t ) LEDPWM_FLAG;
000002  6088              STR      r0,[r1,#8]
;;;488    }
000004  4770              BX       lr
;;;489    
                          ENDP
000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x40022300
                          AREA ||i.LEDPWM_Cmd||, CODE, READONLY, ALIGN=2
                  LEDPWM_Cmd PROC
;;;128     */
;;;129    void LEDPWM_Cmd ( FunctionalState NewState )
000000  4905              LDR      r1,|L2.24|
;;;130    {
;;;131        
;;;132        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;133    
;;;134        if ( NewState != DISABLE )
000002  2800              CMP      r0,#0
;;;135        {
;;;136            
;;;137            LEDPWM->LEDPWM_CON |= LEDPWM_CON_ENPWM;
;;;138        }
;;;139        else
;;;140        {
;;;141            
;;;142            LEDPWM->LEDPWM_CON &= ( uint16_t ) ~LEDPWM_CON_ENPWM;
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L2.14|
000008  2280              MOVS     r2,#0x80              ;137
00000a  4310              ORRS     r0,r0,r2              ;137
00000c  e001              B        |L2.18|
                  |L2.14|
00000e  4a03              LDR      r2,|L2.28|
000010  4010              ANDS     r0,r0,r2
                  |L2.18|
000012  6008              STR      r0,[r1,#0]            ;137
;;;143        }
;;;144    }
000014  4770              BX       lr
;;;145    
                          ENDP
000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x40022300
                  |L2.28|
                          DCD      0x0000ff7f
                          AREA ||i.LEDPWM_DeInit||, CODE, READONLY, ALIGN=1
                  LEDPWM_DeInit PROC
;;;43      */
;;;44     void LEDPWM_DeInit ( void )
000000  b510              PUSH     {r4,lr}
;;;45     {
;;;46         
;;;47         RCC_APB2PeriphResetCmd ( RCC_APB2Periph_LEDPWM, ENABLE );
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;48         
;;;49         RCC_APB2PeriphResetCmd ( RCC_APB2Periph_LEDPWM, DISABLE );
00000a  2100              MOVS     r1,#0
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;50     }
000012  bd10              POP      {r4,pc}
;;;51     
                          ENDP
                          AREA ||i.LEDPWM_GetCycle||, CODE, READONLY, ALIGN=2
                  LEDPWM_GetCycle PROC
;;;206     */
;;;207    uint8_t LEDPWM_GetCycle()
000000  4801              LDR      r0,|L4.8|
;;;208    {
;;;209        
;;;210        return ( uint8_t ) LEDPWM->LEDPWM_CYCLE;
000002  6980              LDR      r0,[r0,#0x18]
000004  b2c0              UXTB     r0,r0
;;;211    }
000006  4770              BX       lr
;;;212    
                          ENDP
                  |L4.8|
                          DCD      0x40022300
                          AREA ||i.LEDPWM_GetDuty||, CODE, READONLY, ALIGN=2
                  LEDPWM_GetDuty PROC
;;;355     */
;;;356    uint8_t LEDPWM_GetDuty ( LEDPWM_Channel_Typedef LEDPWM_Channel )
000000  2201              MOVS     r2,#1
;;;357    {
000002  4603              MOV      r3,r0
;;;358        uint8_t tmpvalue ;
;;;359        uint32_t tmpchannel;
;;;360        
;;;361        assert_param ( IS_LEDPWM_CHANNEL ( LEDPWM_Channel ) );
;;;362    
;;;363        tmpchannel = 1;
;;;364    #if defined (SC32f10xx) || (SC32f12xx)
;;;365        for ( tmpvalue = 0; tmpvalue < 32; tmpvalue++ )
000004  2100              MOVS     r1,#0
                  |L5.6|
;;;366        {
;;;367            if ( ( uint32_t ) LEDPWM_Channel & tmpchannel )
000006  4213              TST      r3,r2
000008  d005              BEQ      |L5.22|
;;;368            {
;;;369                return ( uint16_t ) ( LEDPWM->LEDPWM_DT[tmpvalue] );
00000a  0088              LSLS     r0,r1,#2
00000c  4905              LDR      r1,|L5.36|
00000e  1840              ADDS     r0,r0,r1
000010  6b00              LDR      r0,[r0,#0x30]
000012  b2c0              UXTB     r0,r0
;;;370            }
;;;371            tmpchannel = tmpchannel << 1;
;;;372        }
;;;373    #elif defined (SC32f11xx)
;;;374        if ( LEDPWM_Channel <= 0x80000000 )
;;;375        {
;;;376            for ( tmpvalue = 0; tmpvalue < 32; tmpvalue++ )
;;;377            {
;;;378                if ( ( uint32_t ) LEDPWM_Channel & tmpchannel )
;;;379                {
;;;380                    return ( uint16_t ) ( LEDPWM->LEDPWM_DT[tmpvalue] );
;;;381                }
;;;382                tmpchannel = tmpchannel << 1;
;;;383            }
;;;384        }
;;;385        else
;;;386        {
;;;387            for ( tmpvalue = 0; tmpvalue < 32; tmpvalue++ )
;;;388            {
;;;389                if ( ( uint32_t ) LEDPWM_Channel & tmpchannel )
;;;390                {
;;;391                    return ( uint16_t ) ( LEDPWM->LEDPWM_DT[tmpvalue] );
;;;392                }
;;;393                tmpchannel = tmpchannel << 1;
;;;394            }
;;;395            for ( tmpvalue = 0; tmpvalue < 7; tmpvalue++ )
;;;396            {
;;;397                if ( ( uint32_t ) LEDPWM_Channel & tmpchannel )
;;;398                {
;;;399                    return ( uint16_t ) ( LEDPWM->LEDPWM_DT[tmpvalue + 31] );
;;;400                }
;;;401                tmpchannel = tmpchannel << 1;
;;;402            }
;;;403        }
;;;404    #endif
;;;405        return 0;
;;;406    }
000014  4770              BX       lr
                  |L5.22|
000016  1c49              ADDS     r1,r1,#1              ;371
000018  0052              LSLS     r2,r2,#1              ;371
00001a  b2c9              UXTB     r1,r1                 ;365
00001c  2920              CMP      r1,#0x20              ;365
00001e  d3f2              BCC      |L5.6|
000020  2000              MOVS     r0,#0                 ;405
000022  4770              BX       lr
;;;407    
                          ENDP
                  |L5.36|
                          DCD      0x40022300
                          AREA ||i.LEDPWM_GetFlagStatus||, CODE, READONLY, ALIGN=2
                  LEDPWM_GetFlagStatus PROC
;;;457     */
;;;458    FlagStatus LEDPWM_GetFlagStatus ( uint16_t LEDPWM_FLAG )
000000  4a03              LDR      r2,|L6.16|
;;;459    {
000002  4601              MOV      r1,r0
;;;460        ITStatus bitstatus = RESET;
;;;461        
;;;462        assert_param ( IS_LEDPWM_FLAG ( LEDPWM_FLAG ) );
;;;463    
;;;464        if ( ( LEDPWM->LEDPWM_STS & LEDPWM_FLAG ) != ( uint16_t ) RESET )
000004  6892              LDR      r2,[r2,#8]
000006  2000              MOVS     r0,#0                 ;460
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L6.14|
;;;465        {
;;;466            bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L6.14|
;;;467        }
;;;468        else
;;;469        {
;;;470            bitstatus = RESET;
;;;471        }
;;;472        return bitstatus;
;;;473    }
00000e  4770              BX       lr
;;;474    
                          ENDP
                  |L6.16|
                          DCD      0x40022300
                          AREA ||i.LEDPWM_GetPrescaler||, CODE, READONLY, ALIGN=2
                  LEDPWM_GetPrescaler PROC
;;;184     */
;;;185    LEDPWM_Prescaler_TypeDef LEDPWM_GetPrescaler ( void )
000000  4802              LDR      r0,|L7.12|
;;;186    {
;;;187        
;;;188        return ( LEDPWM_Prescaler_TypeDef ) ( LEDPWM->LEDPWM_CON & LEDPWM_CON_PWMCLK );
000002  6800              LDR      r0,[r0,#0]
000004  0700              LSLS     r0,r0,#28
000006  0f00              LSRS     r0,r0,#28
;;;189    }
000008  4770              BX       lr
;;;190    
                          ENDP
00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      0x40022300
                          AREA ||i.LEDPWM_ITConfig||, CODE, READONLY, ALIGN=2
                  LEDPWM_ITConfig PROC
;;;431     */
;;;432    void LEDPWM_ITConfig ( uint16_t LEDPWM_IT, FunctionalState NewState )
000000  4a05              LDR      r2,|L8.24|
;;;433    {
;;;434        
;;;435        assert_param ( IS_LEDPWM_IT ( LEDPWM_IT ) );
;;;436        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;437    
;;;438        if ( NewState != DISABLE )
000002  2900              CMP      r1,#0
;;;439        {
;;;440            
;;;441            LEDPWM->LEDPWM_CON |= LEDPWM_IT;
;;;442        }
;;;443        else
;;;444        {
;;;445            
;;;446            LEDPWM->LEDPWM_CON &= ( uint16_t ) ~LEDPWM_IT;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L8.12|
000008  4301              ORRS     r1,r1,r0              ;441
00000a  e002              B        |L8.18|
                  |L8.12|
00000c  43c0              MVNS     r0,r0
00000e  b280              UXTH     r0,r0
000010  4001              ANDS     r1,r1,r0
                  |L8.18|
000012  6011              STR      r1,[r2,#0]            ;441
;;;447        }
;;;448    }
000014  4770              BX       lr
;;;449    
                          ENDP
000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      0x40022300
                          AREA ||i.LEDPWM_Init||, CODE, READONLY, ALIGN=2
                  LEDPWM_Init PROC
;;;79      */
;;;80     void LEDPWM_Init ( LEDPWM_InitTypeDef* LEDPWM_InitStruct )
000000  b510              PUSH     {r4,lr}
;;;81     {
;;;82         uint32_t tmpreg;
;;;83     
;;;84         
;;;85         
;;;86         tmpreg = LEDPWM->LEDPWM_CON;
000002  4908              LDR      r1,|L9.36|
000004  680a              LDR      r2,[r1,#0]
;;;87         
;;;88         tmpreg &= ( uint32_t ) ~ ( LEDPWM_CON_PWMCLK | LEDPWM_CON_PWMMD0 );
000006  234f              MOVS     r3,#0x4f
000008  439a              BICS     r2,r2,r3
;;;89         
;;;90         
;;;91         
;;;92         
;;;93         tmpreg |= ( uint32_t ) ( LEDPWM_InitStruct->LEDPWM_Prescaler | LEDPWM_InitStruct->LEDPWM_AlignedMode );
00000a  8803              LDRH     r3,[r0,#0]
00000c  8844              LDRH     r4,[r0,#2]
00000e  4323              ORRS     r3,r3,r4
000010  4313              ORRS     r3,r3,r2
;;;94     
;;;95         
;;;96         LEDPWM->LEDPWM_CON = tmpreg;
000012  600b              STR      r3,[r1,#0]
;;;97     #if defined(SC32f10xx) || defined(SC32f12xx)
;;;98         
;;;99         LEDPWM->LEDPWM_CHN = LEDPWM_InitStruct->LEDPWM_OutputChannel;
000014  6882              LDR      r2,[r0,#8]
000016  604a              STR      r2,[r1,#4]
;;;100    
;;;101        
;;;102        LEDPWM->LEDPWM_INV = LEDPWM_InitStruct->LEDPWM_LowPolarityChannl;
000018  6902              LDR      r2,[r0,#0x10]
00001a  60ca              STR      r2,[r1,#0xc]
;;;103    #elif defined(SC32f11xx)
;;;104        if ( LEDPWM_InitStruct->LEDPWM_OutputChannel0 <= 0x80000000 || LEDPWM_InitStruct->LEDPWM_OutputChannel0 == 0xFFFFFFFF )
;;;105        {
;;;106            LEDPWM->LEDPWM_CHN0 = LEDPWM_InitStruct->LEDPWM_OutputChannel0;
;;;107            
;;;108            LEDPWM->LEDPWM_INV0 = LEDPWM_InitStruct->LEDPWM_LowPolarityChannl0;
;;;109        }
;;;110        
;;;111    
;;;112        if ( ( LEDPWM_InitStruct->LEDPWM_OutputChannel1 & 0x0FFFFFFF ) < 0x0000004F || LEDPWM_InitStruct->LEDPWM_OutputChannel1 == 0x0000007F )
;;;113        {
;;;114            LEDPWM->LEDPWM_CHN1 = LEDPWM_InitStruct->LEDPWM_OutputChannel1 & 0x7FFFFFFF;
;;;115            LEDPWM->LEDPWM_INV1 = LEDPWM_InitStruct->LEDPWM_LowPolarityChannl1 & 0x7FFFFFFF;
;;;116        }
;;;117    #endif
;;;118        
;;;119        LEDPWM->LEDPWM_CYCLE = LEDPWM_InitStruct->LEDPWM_Cycle;
00001c  7900              LDRB     r0,[r0,#4]
00001e  6188              STR      r0,[r1,#0x18]
;;;120    }
000020  bd10              POP      {r4,pc}
;;;121    
                          ENDP
000022  0000              DCW      0x0000
                  |L9.36|
                          DCD      0x40022300
                          AREA ||i.LEDPWM_SetCycle||, CODE, READONLY, ALIGN=2
                  LEDPWM_SetCycle PROC
;;;196     */
;;;197    void LEDPWM_SetCycle ( uint8_t LEDPWM_Cycle )
000000  4901              LDR      r1,|L10.8|
;;;198    {
;;;199        
;;;200        LEDPWM->LEDPWM_CYCLE = LEDPWM_Cycle;
000002  6188              STR      r0,[r1,#0x18]
;;;201    }
000004  4770              BX       lr
;;;202    
                          ENDP
000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x40022300
                          AREA ||i.LEDPWM_SetDuty||, CODE, READONLY, ALIGN=2
                  LEDPWM_SetDuty PROC
;;;263     */
;;;264    void LEDPWM_SetDuty ( LEDPWM_Channel_Typedef LEDPWM_Channel, uint8_t LEDPWM_Duty )
000000  b530              PUSH     {r4,r5,lr}
;;;265    {
;;;266        uint8_t tmpvalue;
;;;267        uint32_t tmpchannel;
;;;268        
;;;269        assert_param ( IS_LEDPWM_CHANNEL ( LEDPWM_Channel ) );
;;;270    #if defined (SC32f10xx) || (SC32f12xx)
;;;271        tmpchannel = 1;
000002  2301              MOVS     r3,#1
;;;272        for ( tmpvalue = 0; tmpvalue < 32; tmpvalue++ )
;;;273        {
;;;274            if ( ( uint32_t ) LEDPWM_Channel & tmpchannel )
;;;275            {
;;;276                LEDPWM->LEDPWM_DT[tmpvalue] = LEDPWM_Duty;
000004  4c06              LDR      r4,|L11.32|
000006  4605              MOV      r5,r0                 ;265
000008  2200              MOVS     r2,#0                 ;272
                  |L11.10|
00000a  421d              TST      r5,r3                 ;274
00000c  d002              BEQ      |L11.20|
00000e  0090              LSLS     r0,r2,#2
000010  1900              ADDS     r0,r0,r4
000012  6301              STR      r1,[r0,#0x30]
                  |L11.20|
;;;277            }
;;;278            tmpchannel = tmpchannel << 1;
000014  1c52              ADDS     r2,r2,#1
000016  005b              LSLS     r3,r3,#1
000018  b2d2              UXTB     r2,r2                 ;272
00001a  2a20              CMP      r2,#0x20              ;272
00001c  d3f5              BCC      |L11.10|
;;;279        }
;;;280    #elif defined (SC32f11xx)
;;;281        if ( LEDPWM_Channel <= 0x80000000 )
;;;282        {
;;;283            for ( tmpvalue = 0; tmpvalue < 32; tmpvalue++ )
;;;284            {
;;;285                if ( ( uint32_t ) LEDPWM_Channel & tmpchannel )
;;;286                {
;;;287                    LEDPWM->LEDPWM_DT[tmpvalue] = LEDPWM_Duty;
;;;288                }
;;;289                tmpchannel = tmpchannel << 1;
;;;290            }
;;;291        }
;;;292        else
;;;293        {
;;;294            for ( tmpvalue = 0; tmpvalue < 7; tmpvalue++ )
;;;295            {
;;;296                if ( ( uint32_t ) LEDPWM_Channel & tmpchannel )
;;;297                {
;;;298                    LEDPWM->LEDPWM_DT[tmpvalue + 31] = LEDPWM_Duty;
;;;299                }
;;;300                tmpchannel = tmpchannel << 1;
;;;301            }
;;;302        }
;;;303    #endif
;;;304    }
00001e  bd30              POP      {r4,r5,pc}
;;;305    
                          ENDP
                  |L11.32|
                          DCD      0x40022300
                          AREA ||i.LEDPWM_SetPrescaler||, CODE, READONLY, ALIGN=2
                  LEDPWM_SetPrescaler PROC
;;;159     */
;;;160    void LEDPWM_SetPrescaler ( LEDPWM_Prescaler_TypeDef LEDPWM_Prescaler )
000000  4904              LDR      r1,|L12.20|
;;;161    {
;;;162        
;;;163        assert_param ( IS_LEDPWM_PRESCALER ( LEDPWM_Prescaler ) );
;;;164    
;;;165        
;;;166        LEDPWM->LEDPWM_CON &= ( uint16_t ) ~ ( LEDPWM_CON_PWMCLK );
000002  680a              LDR      r2,[r1,#0]
000004  4b04              LDR      r3,|L12.24|
000006  401a              ANDS     r2,r2,r3
000008  600a              STR      r2,[r1,#0]
;;;167    
;;;168        
;;;169        LEDPWM->LEDPWM_CON |= LEDPWM_Prescaler;
00000a  680a              LDR      r2,[r1,#0]
00000c  4302              ORRS     r2,r2,r0
00000e  600a              STR      r2,[r1,#0]
;;;170    }
000010  4770              BX       lr
;;;171    
                          ENDP
000012  0000              DCW      0x0000
                  |L12.20|
                          DCD      0x40022300
                  |L12.24|
                          DCD      0x0000fff0
                          AREA ||i.LEDPWM_StructInit||, CODE, READONLY, ALIGN=1
                  LEDPWM_StructInit PROC
;;;56       */
;;;57     void LEDPWM_StructInit ( LEDPWM_InitTypeDef* LEDPWM_InitStruct )
000000  2100              MOVS     r1,#0
;;;58     {
;;;59         
;;;60         LEDPWM_InitStruct->LEDPWM_AlignedMode = LEDPWM_AlignmentMode_Edge;
000002  8041              STRH     r1,[r0,#2]
;;;61         LEDPWM_InitStruct->LEDPWM_Cycle = 0x0000;
000004  7101              STRB     r1,[r0,#4]
;;;62     #if defined(SC32f10xx) || defined(SC32f12xx)
;;;63         LEDPWM_InitStruct->LEDPWM_LowPolarityChannl = LEDPWMChannel_Less;
000006  6101              STR      r1,[r0,#0x10]
;;;64         LEDPWM_InitStruct->LEDPWM_OutputChannel = LEDPWMChannel_Less;
000008  6141              STR      r1,[r0,#0x14]
00000a  6081              STR      r1,[r0,#8]
;;;65     #elif defined(SC32f11xx)
;;;66         LEDPWM_InitStruct->LEDPWM_LowPolarityChannl0 = LEDPWMChannel_Less;
;;;67         LEDPWM_InitStruct->LEDPWM_OutputChannel0 = LEDPWMChannel_Less;
;;;68     
;;;69         LEDPWM_InitStruct->LEDPWM_LowPolarityChannl1 = LEDPWMChannel_Less;
;;;70         LEDPWM_InitStruct->LEDPWM_OutputChannel1 = LEDPWMChannel_Less;
;;;71     #endif
;;;72         LEDPWM_InitStruct->LEDPWM_Prescaler = LEDPWM_PRESCALER_DIV1;
00000c  60c1              STR      r1,[r0,#0xc]
00000e  8001              STRH     r1,[r0,#0]
;;;73     }
000010  4770              BX       lr
;;;74     
                          ENDP
;*** Start embedded assembler ***
#line 1 "..\\FWLib\\SC32F1XXX_Lib\\src\\sc32f1xxx_ledpwm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_sc32f1xxx_ledpwm_c_ac2904db____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___18_sc32f1xxx_ledpwm_c_ac2904db____REV16| PROC
#line 464
 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_sc32f1xxx_ledpwm_c_ac2904db____REVSH|
#line 478
|__asm___18_sc32f1xxx_ledpwm_c_ac2904db____REVSH| PROC
#line 479
 revsh r0, r0
 bx lr
	ENDP
;*** End   embedded assembler ***
