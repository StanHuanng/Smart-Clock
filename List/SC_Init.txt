; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\output\sc_init.o --asm_dir=..\List\ --list_dir=..\List\ --depend=..\output\sc_init.d --cpu=Cortex-M0+ --apcs=interwork --diag_suppress=9931 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -IC:\Keil_v5\ARM\PACK\Keil\SC32F1xxx_DFP\1.0.6\Device\SC32F10xx\FWLib\SC32_Lib\inc -D__UVISION_VERSION=539 -DSC32F10xx -DSC32f10xx --omf_browse=..\output\sc_init.crf ..\User\SC_Init.c]
                          THUMB

                          AREA ||i.SC_ACMP_Init||, CODE, READONLY, ALIGN=1

                  SC_ACMP_Init PROC
;;;699      */
;;;700    void SC_ACMP_Init(void)
000000  4770              BX       lr
;;;701    {
;;;702    	/*<Generated by EasyCodeCube begin>*/
;;;703        //Forbid editing areas between the labels !!!
;;;704    	/*<Generated by EasyCodeCube end>*/	
;;;705    }
;;;706    
                          ENDP


                          AREA ||i.SC_ADC_Init||, CODE, READONLY, ALIGN=1

                  SC_ADC_Init PROC
;;;475      */
;;;476    void SC_ADC_Init(void)
000000  4770              BX       lr
;;;477    {
;;;478    	/*<Generated by EasyCodeCube begin>*/
;;;479        //Forbid editing areas between the labels !!!
;;;480    	/*<Generated by EasyCodeCube end>*/
;;;481    }
;;;482    
                          ENDP


                          AREA ||i.SC_BTM_Init||, CODE, READONLY, ALIGN=1

                  SC_BTM_Init PROC
;;;588      */
;;;589    void SC_BTM_Init(void)
000000  4770              BX       lr
;;;590    {
;;;591    	/*<Generated by EasyCodeCube begin>*/
;;;592        //Forbid editing areas between the labels !!!
;;;593    	/*<Generated by EasyCodeCube end>*/
;;;594    }
;;;595    
                          ENDP


                          AREA ||i.SC_CRC_Init||, CODE, READONLY, ALIGN=1

                  SC_CRC_Init PROC
;;;601      */
;;;602    void SC_CRC_Init(void)
000000  4770              BX       lr
;;;603    {
;;;604    	/*<Generated by EasyCodeCube begin>*/
;;;605        //Forbid editing areas between the labels !!!
;;;606    	/*<Generated by EasyCodeCube end>*/
;;;607    }
;;;608    
                          ENDP


                          AREA ||i.SC_DMA0_Init||, CODE, READONLY, ALIGN=1

                  SC_DMA0_Init PROC
;;;613      */
;;;614    void SC_DMA0_Init(void)
000000  4770              BX       lr
;;;615    {
;;;616    	/*<Generated by EasyCodeCube begin>*/
;;;617        //Forbid editing areas between the labels !!!
;;;618    	/*<Generated by EasyCodeCube end>*/
;;;619    }
;;;620    
                          ENDP


                          AREA ||i.SC_DMA1_Init||, CODE, READONLY, ALIGN=1

                  SC_DMA1_Init PROC
;;;625      */
;;;626    void SC_DMA1_Init(void)
000000  4770              BX       lr
;;;627    {
;;;628    	/*<Generated by EasyCodeCube begin>*/
;;;629        //Forbid editing areas between the labels !!!
;;;630    	/*<Generated by EasyCodeCube end>*/
;;;631    }
;;;632    #if defined (SC32f10xx)
                          ENDP


                          AREA ||i.SC_DMA2_Init||, CODE, READONLY, ALIGN=1

                  SC_DMA2_Init PROC
;;;638      */
;;;639    void SC_DMA2_Init(void)
000000  4770              BX       lr
;;;640    {
;;;641    	/*<Generated by EasyCodeCube begin>*/
;;;642        //Forbid editing areas between the labels !!!
;;;643    	/*<Generated by EasyCodeCube end>*/
;;;644    }
;;;645    
                          ENDP


                          AREA ||i.SC_DMA3_Init||, CODE, READONLY, ALIGN=1

                  SC_DMA3_Init PROC
;;;650      */
;;;651    void SC_DMA3_Init(void)
000000  4770              BX       lr
;;;652    {
;;;653    	/*<Generated by EasyCodeCube begin>*/
;;;654        //Forbid editing areas between the labels !!!
;;;655    	/*<Generated by EasyCodeCube end>*/
;;;656    }
;;;657    #endif
                          ENDP


                          AREA ||i.SC_GPIO_Init||, CODE, READONLY, ALIGN=2

                  SC_GPIO_Init PROC
;;;116      */
;;;117    void SC_GPIO_Init(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;118    {
000002  b099              SUB      sp,sp,#0x64
;;;119    	/*<Generated by EasyCodeCube begin>*/
;;;120        //Forbid editing areas between the labels !!!
;;;121    	/*GPIOInit_PC04 Struct*/GPIO_InitTypeDef GPIOInit_PC04_Struct;
;;;122    	GPIOInit_PC04_Struct.GPIO_Pin = GPIO_Pin_4;
000004  2010              MOVS     r0,#0x10
000006  4669              MOV      r1,sp
000008  8008              STRH     r0,[r1,#0]
;;;123    	GPIOInit_PC04_Struct.GPIO_Mode = GPIO_Mode_OUT_PP;
00000a  2502              MOVS     r5,#2
00000c  804d              STRH     r5,[r1,#2]
;;;124    	GPIOInit_PC04_Struct.GPIO_DriveLevel = 0;
00000e  2400              MOVS     r4,#0
000010  808c              STRH     r4,[r1,#4]
;;;125    	GPIO_Init(GPIOC,&GPIOInit_PC04_Struct);/*PC.04端口初始化*/
000012  4833              LDR      r0,|L9.224|
000014  f7fffffe          BL       GPIO_Init
;;;126    	/*GPIOInit_PC05 Struct*/GPIO_InitTypeDef GPIOInit_PC05_Struct;
;;;127    	GPIOInit_PC05_Struct.GPIO_Pin = GPIO_Pin_5;
000018  2020              MOVS     r0,#0x20
00001a  4669              MOV      r1,sp
00001c  8108              STRH     r0,[r1,#8]
;;;128    	GPIOInit_PC05_Struct.GPIO_Mode = GPIO_Mode_OUT_PP;
00001e  814d              STRH     r5,[r1,#0xa]
;;;129    	GPIOInit_PC05_Struct.GPIO_DriveLevel = 0;
000020  818c              STRH     r4,[r1,#0xc]
;;;130    	GPIO_Init(GPIOC,&GPIOInit_PC05_Struct);/*PC.05端口初始化*/
000022  a902              ADD      r1,sp,#8
000024  482e              LDR      r0,|L9.224|
000026  f7fffffe          BL       GPIO_Init
;;;131    	/*GPIOInit_PC10 Struct*/GPIO_InitTypeDef GPIOInit_PC10_Struct;
;;;132    	GPIOInit_PC10_Struct.GPIO_Pin = GPIO_Pin_10;
00002a  0268              LSLS     r0,r5,#9
00002c  4669              MOV      r1,sp
00002e  8208              STRH     r0,[r1,#0x10]
;;;133    	GPIOInit_PC10_Struct.GPIO_Mode = GPIO_Mode_OUT_PP;
000030  824d              STRH     r5,[r1,#0x12]
;;;134    	GPIOInit_PC10_Struct.GPIO_DriveLevel = 0;
000032  828c              STRH     r4,[r1,#0x14]
;;;135    	GPIO_Init(GPIOC,&GPIOInit_PC10_Struct);/*PC.10端口初始化*/
000034  a904              ADD      r1,sp,#0x10
000036  482a              LDR      r0,|L9.224|
000038  f7fffffe          BL       GPIO_Init
;;;136    	/*GPIOInit_PC11 Struct*/GPIO_InitTypeDef GPIOInit_PC11_Struct;
;;;137    	GPIOInit_PC11_Struct.GPIO_Pin = GPIO_Pin_11;
00003c  02af              LSLS     r7,r5,#10
00003e  4669              MOV      r1,sp
000040  830f              STRH     r7,[r1,#0x18]
;;;138    	GPIOInit_PC11_Struct.GPIO_Mode = GPIO_Mode_OUT_PP;
000042  834d              STRH     r5,[r1,#0x1a]
;;;139    	GPIOInit_PC11_Struct.GPIO_DriveLevel = 0;
000044  838c              STRH     r4,[r1,#0x1c]
;;;140    	GPIO_Init(GPIOC,&GPIOInit_PC11_Struct);/*PC.11端口初始化*/
000046  a906              ADD      r1,sp,#0x18
000048  4825              LDR      r0,|L9.224|
00004a  f7fffffe          BL       GPIO_Init
;;;141    	/*GPIOInit_PA07 Struct*/GPIO_InitTypeDef GPIOInit_PA07_Struct;
;;;142    	GPIOInit_PA07_Struct.GPIO_Pin = GPIO_Pin_7;
00004e  2080              MOVS     r0,#0x80
000050  4669              MOV      r1,sp
000052  8408              STRH     r0,[r1,#0x20]
;;;143    	GPIOInit_PA07_Struct.GPIO_Mode = GPIO_Mode_OUT_PP;
000054  844d              STRH     r5,[r1,#0x22]
;;;144    	GPIOInit_PA07_Struct.GPIO_DriveLevel = 0;
000056  848c              STRH     r4,[r1,#0x24]
;;;145    	GPIO_Init(GPIOA,&GPIOInit_PA07_Struct);/*PA.07端口初始化*/
000058  a908              ADD      r1,sp,#0x20
00005a  4822              LDR      r0,|L9.228|
00005c  f7fffffe          BL       GPIO_Init
;;;146    	/*GPIOInit_PA08 Struct*/GPIO_InitTypeDef GPIOInit_PA08_Struct;
;;;147    	GPIOInit_PA08_Struct.GPIO_Pin = GPIO_Pin_8;
000060  01e8              LSLS     r0,r5,#7
000062  4669              MOV      r1,sp
000064  8508              STRH     r0,[r1,#0x28]
;;;148    	GPIOInit_PA08_Struct.GPIO_Mode = GPIO_Mode_OUT_PP;
000066  854d              STRH     r5,[r1,#0x2a]
;;;149    	GPIOInit_PA08_Struct.GPIO_DriveLevel = 0;
000068  858c              STRH     r4,[r1,#0x2c]
;;;150    	GPIO_Init(GPIOA,&GPIOInit_PA08_Struct);/*PA.08端口初始化*/
00006a  a90a              ADD      r1,sp,#0x28
00006c  481d              LDR      r0,|L9.228|
00006e  f7fffffe          BL       GPIO_Init
;;;151    	/*GPIOInit_PA09 Struct*/GPIO_InitTypeDef GPIOInit_PA09_Struct;
;;;152    	GPIOInit_PA09_Struct.GPIO_Pin = GPIO_Pin_9;
000072  0228              LSLS     r0,r5,#8
000074  4669              MOV      r1,sp
000076  8608              STRH     r0,[r1,#0x30]
;;;153    	GPIOInit_PA09_Struct.GPIO_Mode = GPIO_Mode_OUT_PP;
000078  864d              STRH     r5,[r1,#0x32]
;;;154    	GPIOInit_PA09_Struct.GPIO_DriveLevel = 0;
00007a  868c              STRH     r4,[r1,#0x34]
;;;155    	GPIO_Init(GPIOA,&GPIOInit_PA09_Struct);/*PA.09端口初始化*/
00007c  a90c              ADD      r1,sp,#0x30
00007e  4819              LDR      r0,|L9.228|
000080  f7fffffe          BL       GPIO_Init
;;;156    	/*GPIOInit_PA11 Struct*/GPIO_InitTypeDef GPIOInit_PA11_Struct;
;;;157    	GPIOInit_PA11_Struct.GPIO_Pin = GPIO_Pin_11;
000084  4669              MOV      r1,sp
000086  870f              STRH     r7,[r1,#0x38]
;;;158    	GPIOInit_PA11_Struct.GPIO_Mode = GPIO_Mode_IN_PU;
000088  2601              MOVS     r6,#1
00008a  874e              STRH     r6,[r1,#0x3a]
;;;159    	GPIOInit_PA11_Struct.GPIO_DriveLevel = 0;
00008c  878c              STRH     r4,[r1,#0x3c]
;;;160    	GPIO_Init(GPIOA,&GPIOInit_PA11_Struct);/*PA.11端口初始化*/
00008e  a90e              ADD      r1,sp,#0x38
000090  4814              LDR      r0,|L9.228|
000092  f7fffffe          BL       GPIO_Init
;;;161    	/*GPIOInit_PA12 Struct*/GPIO_InitTypeDef GPIOInit_PA12_Struct;
;;;162    	GPIOInit_PA12_Struct.GPIO_Pin = GPIO_Pin_12;
000096  02e8              LSLS     r0,r5,#11
000098  a910              ADD      r1,sp,#0x40
00009a  8008              STRH     r0,[r1,#0]
;;;163    	GPIOInit_PA12_Struct.GPIO_Mode = GPIO_Mode_OUT_PP;
00009c  804d              STRH     r5,[r1,#2]
;;;164    	GPIOInit_PA12_Struct.GPIO_DriveLevel = 0;
00009e  808c              STRH     r4,[r1,#4]
;;;165    	GPIO_Init(GPIOA,&GPIOInit_PA12_Struct);/*PA.12端口初始化*/
0000a0  4810              LDR      r0,|L9.228|
0000a2  f7fffffe          BL       GPIO_Init
;;;166    	/*GPIOInit_PB10 Struct*/GPIO_InitTypeDef GPIOInit_PB10_Struct;
;;;167    	GPIOInit_PB10_Struct.GPIO_Pin = GPIO_Pin_10;
0000a6  0268              LSLS     r0,r5,#9
0000a8  a910              ADD      r1,sp,#0x40
0000aa  8108              STRH     r0,[r1,#8]
;;;168    	GPIOInit_PB10_Struct.GPIO_Mode = GPIO_Mode_IN_PU;
0000ac  814e              STRH     r6,[r1,#0xa]
;;;169    	GPIOInit_PB10_Struct.GPIO_DriveLevel = 0;
;;;170    	GPIO_Init(GPIOB,&GPIOInit_PB10_Struct);/*PB.10端口初始化*/
0000ae  4d0e              LDR      r5,|L9.232|
0000b0  818c              STRH     r4,[r1,#0xc]          ;169
0000b2  a912              ADD      r1,sp,#0x48
0000b4  4628              MOV      r0,r5
0000b6  f7fffffe          BL       GPIO_Init
;;;171    	/*GPIOInit_PB11 Struct*/GPIO_InitTypeDef GPIOInit_PB11_Struct;
;;;172    	GPIOInit_PB11_Struct.GPIO_Pin = GPIO_Pin_11;
0000ba  a910              ADD      r1,sp,#0x40
0000bc  820f              STRH     r7,[r1,#0x10]
;;;173    	GPIOInit_PB11_Struct.GPIO_Mode = GPIO_Mode_IN_PU;
0000be  824e              STRH     r6,[r1,#0x12]
;;;174    	GPIOInit_PB11_Struct.GPIO_DriveLevel = 0;
0000c0  828c              STRH     r4,[r1,#0x14]
;;;175    	GPIO_Init(GPIOB,&GPIOInit_PB11_Struct);/*PB.11端口初始化*/
0000c2  a914              ADD      r1,sp,#0x50
0000c4  4628              MOV      r0,r5
0000c6  f7fffffe          BL       GPIO_Init
;;;176    	/*GPIOInit_PC00 Struct*/GPIO_InitTypeDef GPIOInit_PC00_Struct;
;;;177    	GPIOInit_PC00_Struct.GPIO_Pin = GPIO_Pin_0;
0000ca  a910              ADD      r1,sp,#0x40
0000cc  830e              STRH     r6,[r1,#0x18]
;;;178    	GPIOInit_PC00_Struct.GPIO_Mode = GPIO_Mode_IN_PU;
0000ce  834e              STRH     r6,[r1,#0x1a]
;;;179    	GPIOInit_PC00_Struct.GPIO_DriveLevel = 0;
0000d0  838c              STRH     r4,[r1,#0x1c]
;;;180    	GPIO_Init(GPIOC,&GPIOInit_PC00_Struct);/*PC.00端口初始化*/
0000d2  a916              ADD      r1,sp,#0x58
0000d4  4802              LDR      r0,|L9.224|
0000d6  f7fffffe          BL       GPIO_Init
;;;181    	/*<Generated by EasyCodeCube end>*/		
;;;182    }
0000da  b019              ADD      sp,sp,#0x64
0000dc  bdf0              POP      {r4-r7,pc}
;;;183    
                          ENDP

0000de  0000              DCW      0x0000
                  |L9.224|
                          DCD      0x40011200
                  |L9.228|
                          DCD      0x40011000
                  |L9.232|
                          DCD      0x40011100

                          AREA ||i.SC_IAP_Init||, CODE, READONLY, ALIGN=1

                  SC_IAP_Init PROC
;;;487      */
;;;488    void SC_IAP_Init(void)
000000  4770              BX       lr
;;;489    {
;;;490    	/*<Generated by EasyCodeCube begin>*/
;;;491        //Forbid editing areas between the labels !!!
;;;492    	/*<Generated by EasyCodeCube end>*/		
;;;493    }
;;;494    
                          ENDP


                          AREA ||i.SC_INT_Init||, CODE, READONLY, ALIGN=1

                  SC_INT_Init PROC
;;;463      */
;;;464    void SC_INT_Init(void)
000000  4770              BX       lr
;;;465    {
;;;466    	/*<Generated by EasyCodeCube begin>*/
;;;467        //Forbid editing areas between the labels !!!
;;;468    	/*<Generated by EasyCodeCube end>*/
;;;469    }
;;;470    
                          ENDP


                          AREA ||i.SC_Init||, CODE, READONLY, ALIGN=1

                  SC_Init PROC
;;;29       */
;;;30     void SC_Init(void)
000000  b510              PUSH     {r4,lr}
;;;31     {
;;;32     	/*<Generated by EasyCodeCube begin>*/
;;;33         //Forbid editing areas between the labels !!!
;;;34     	SC_GPIO_Init();
000002  f7fffffe          BL       SC_GPIO_Init
;;;35     	SC_OPTION_Init();
000006  f7fffffe          BL       SC_OPTION_Init
;;;36     	SC_RCC_Init();
00000a  f7fffffe          BL       SC_RCC_Init
;;;37     	SC_SYSTICK_Init();
00000e  f7fffffe          BL       SC_SYSTICK_Init
;;;38     	SC_TWI0_Init();
000012  f7fffffe          BL       SC_TWI0_Init
;;;39     	SC_TIM1_Init();
000016  f7fffffe          BL       SC_TIM1_Init
;;;40     	SC_TIM2_Init();
00001a  f7fffffe          BL       SC_TIM2_Init
;;;41     	SC_PWM0_Init();
00001e  f7fffffe          BL       SC_PWM0_Init
;;;42     	/*<Generated by EasyCodeCube end>*/
;;;43     }
000022  bd10              POP      {r4,pc}
;;;44     
                          ENDP


                          AREA ||i.SC_LCD_Init||, CODE, READONLY, ALIGN=1

                  SC_LCD_Init PROC
;;;675      */
;;;676    void SC_LCD_Init(void)
000000  4770              BX       lr
;;;677    {
;;;678    	/*<Generated by EasyCodeCube begin>*/
;;;679        //Forbid editing areas between the labels !!!
;;;680    	/*<Generated by EasyCodeCube end>*/
;;;681    }
;;;682    
                          ENDP


                          AREA ||i.SC_LEDPWM_Init||, CODE, READONLY, ALIGN=1

                  SC_LEDPWM_Init PROC
;;;451      */
;;;452    void SC_LEDPWM_Init(void)
000000  4770              BX       lr
;;;453    {
;;;454    	/*<Generated by EasyCodeCube begin>*/
;;;455        //Forbid editing areas between the labels !!!
;;;456    	/*<Generated by EasyCodeCube end>*/	
;;;457    }
;;;458    
                          ENDP


                          AREA ||i.SC_LED_Init||, CODE, READONLY, ALIGN=1

                  SC_LED_Init PROC
;;;687      */
;;;688    void SC_LED_Init(void)
000000  4770              BX       lr
;;;689    {
;;;690    	/*<Generated by EasyCodeCube begin>*/
;;;691        //Forbid editing areas between the labels !!!
;;;692    	/*<Generated by EasyCodeCube end>*/
;;;693    }
;;;694    
                          ENDP


                          AREA ||i.SC_NVIC_Init||, CODE, READONLY, ALIGN=1

                  SC_NVIC_Init PROC
;;;104      */
;;;105    void SC_NVIC_Init(void)
000000  4770              BX       lr
;;;106    {
;;;107    	/*<Generated by EasyCodeCube begin>*/
;;;108        //Forbid editing areas between the labels !!!
;;;109    	/*<Generated by EasyCodeCube end>*/	
;;;110    }
;;;111    
                          ENDP


                          AREA ||i.SC_OPTION_Init||, CODE, READONLY, ALIGN=2

                  SC_OPTION_Init PROC
;;;88       */
;;;89     void SC_OPTION_Init(void)
000000  b510              PUSH     {r4,lr}
;;;90     {
;;;91     	/*<Generated by EasyCodeCube begin>*/
;;;92         //Forbid editing areas between the labels !!!
;;;93     	SC32F10xSx_NIO_Init();
000002  480b              LDR      r0,|L17.48|
000004  2206              MOVS     r2,#6
000006  6a01              LDR      r1,[r0,#0x20]
000008  4311              ORRS     r1,r1,r2
00000a  6201              STR      r1,[r0,#0x20]
00000c  4809              LDR      r0,|L17.52|
00000e  2209              MOVS     r2,#9
000010  6a01              LDR      r1,[r0,#0x20]
000012  0312              LSLS     r2,r2,#12
000014  4311              ORRS     r1,r1,r2
;;;94     	OPTION_LVRConfig(OPTION_LVR_4_3V);
000016  6201              STR      r1,[r0,#0x20]
000018  2003              MOVS     r0,#3
00001a  f7fffffe          BL       OPTION_LVRConfig
;;;95     	/*Init Struct*/OPTION_JTAGCmd(DISABLE);
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       OPTION_JTAGCmd
;;;96     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_IFB,DISABLE);
000024  2100              MOVS     r1,#0
000026  2004              MOVS     r0,#4
000028  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;97     	/*<Generated by EasyCodeCube end>*/	
;;;98     }
00002c  bd10              POP      {r4,pc}
;;;99     
                          ENDP

00002e  0000              DCW      0x0000
                  |L17.48|
                          DCD      0x40011000
                  |L17.52|
                          DCD      0x40011100

                          AREA ||i.SC_PWM0_Init||, CODE, READONLY, ALIGN=2

                  SC_PWM0_Init PROC
;;;413      */
;;;414    void SC_PWM0_Init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;415    {
000002  b086              SUB      sp,sp,#0x18
;;;416    	/*<Generated by EasyCodeCube begin>*/
;;;417        //Forbid editing areas between the labels !!!
;;;418    	RCC_Unlock(0xFF);
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;419    	RCC_APB0PeriphClockCmd(RCC_APB0Periph_PWM0,ENABLE);
00000a  2101              MOVS     r1,#1
00000c  020d              LSLS     r5,r1,#8
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       RCC_APB0PeriphClockCmd
;;;420    	/*PWM00*/PWM_SetDuty(PWM0,PWM_Channel_0,0);
000014  4e29              LDR      r6,|L18.188|
000016  2200              MOVS     r2,#0
000018  2101              MOVS     r1,#1
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       PWM_SetDuty
;;;421    	/*PWM01*/PWM_SetDuty(PWM0,PWM_Channel_1,800);
000020  2219              MOVS     r2,#0x19
000022  0152              LSLS     r2,r2,#5
000024  2102              MOVS     r1,#2
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       PWM_SetDuty
;;;422    	/*PWM02*/PWM_SetDuty(PWM0,PWM_Channel_2,600);
00002c  224b              MOVS     r2,#0x4b
00002e  00d2              LSLS     r2,r2,#3
000030  2104              MOVS     r1,#4
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       PWM_SetDuty
;;;423    	/*PWM03*/PWM_SetDuty(PWM0,PWM_Channel_3,100);
000038  2264              MOVS     r2,#0x64
00003a  2108              MOVS     r1,#8
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       PWM_SetDuty
;;;424    	/*PWM04*/PWM_SetDuty(PWM0,PWM_Channel_4,0);
000042  2200              MOVS     r2,#0
000044  2110              MOVS     r1,#0x10
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       PWM_SetDuty
;;;425    	/*PWM05*/PWM_SetDuty(PWM0,PWM_Channel_5,0);
00004c  2200              MOVS     r2,#0
00004e  2120              MOVS     r1,#0x20
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       PWM_SetDuty
;;;426    	/*PWM06*/PWM_SetDuty(PWM0,PWM_Channel_6,0);
000056  2200              MOVS     r2,#0
000058  2140              MOVS     r1,#0x40
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       PWM_SetDuty
;;;427    	/*PWM07*/PWM_SetDuty(PWM0,PWM_Channel_7,0);
000060  2200              MOVS     r2,#0
000062  2180              MOVS     r1,#0x80
000064  4630              MOV      r0,r6
000066  f7fffffe          BL       PWM_SetDuty
;;;428    	/*Init Struct*/PWM_InitTypeDef PWM_InitStruct;
;;;429    	PWM_InitStruct.PWM_WorkMode = PWM_WorkMode_Independent;
00006a  2400              MOVS     r4,#0
00006c  4668              MOV      r0,sp
00006e  8084              STRH     r4,[r0,#4]
;;;430    	PWM_InitStruct.PWM_Prescaler = PWM_PRESCALER_DIV1;
;;;431    	PWM_InitStruct.PWM_Cycle = 1000;
000070  217d              MOVS     r1,#0x7d
000072  8004              STRH     r4,[r0,#0]            ;430
000074  00c9              LSLS     r1,r1,#3
000076  80c1              STRH     r1,[r0,#6]
;;;432    	PWM_InitStruct.PWM_OutputChannel = PWMChannel_Less|PWM_Channel_0|PWM_Channel_1|PWM_Channel_2|PWM_Channel_3;
000078  200f              MOVS     r0,#0xf
;;;433    	PWM_InitStruct.PWM_LowPolarityChannl = PWMChannel_Less;
;;;434    	PWM_InitStruct.PWM_AlignedMode = PWM_AlignmentMode_Edge;
00007a  9002              STR      r0,[sp,#8]
00007c  9403              STR      r4,[sp,#0xc]
00007e  4668              MOV      r0,sp
000080  8044              STRH     r4,[r0,#2]
;;;435    	PWM_Init(PWM0,&PWM_InitStruct);
000082  4669              MOV      r1,sp
000084  4630              MOV      r0,r6
000086  f7fffffe          BL       PWM_Init
;;;436    	/*Init Struct*/PWM_FDInitTypeDef PWM_FDInitStruct;
;;;437    	PWM_FDInitStruct.PWM_FDMode = PWM_FDMode_Immediate;
00008a  2120              MOVS     r1,#0x20
00008c  4668              MOV      r0,sp
00008e  8201              STRH     r1,[r0,#0x10]
;;;438    	PWM_FDInitStruct.PWM_FDVoltage = PWM_FDVoltage_Low;
000090  8244              STRH     r4,[r0,#0x12]
;;;439    	PWM_FDInitStruct.PWM_FDFilteringTime = PWM_FilteringTime_0us;
000092  8284              STRH     r4,[r0,#0x14]
;;;440    	PWM_FDInit(PWM0, &PWM_FDInitStruct);
000094  a904              ADD      r1,sp,#0x10
000096  4630              MOV      r0,r6
000098  f7fffffe          BL       PWM_FDInit
;;;441    	PWM_FDCmd(PWM0,DISABLE);
00009c  2100              MOVS     r1,#0
00009e  4630              MOV      r0,r6
0000a0  f7fffffe          BL       PWM_FDCmd
;;;442    	/*INTEN*/PWM_ITConfig(PWM0,PWM_IT_INTEN,DISABLE);
0000a4  2200              MOVS     r2,#0
0000a6  4629              MOV      r1,r5
0000a8  4630              MOV      r0,r6
0000aa  f7fffffe          BL       PWM_ITConfig
;;;443    	PWM_Cmd(PWM0,ENABLE);
0000ae  2101              MOVS     r1,#1
0000b0  4630              MOV      r0,r6
0000b2  f7fffffe          BL       PWM_Cmd
;;;444    	/*<Generated by EasyCodeCube end>*/	
;;;445    }
0000b6  b006              ADD      sp,sp,#0x18
0000b8  bd70              POP      {r4-r6,pc}
;;;446    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L18.188|
                          DCD      0x40020200

                          AREA ||i.SC_PWR_Init||, CODE, READONLY, ALIGN=1

                  SC_PWR_Init PROC
;;;711      */
;;;712    void SC_PWR_Init(void)
000000  4770              BX       lr
;;;713    {
;;;714    	/*<Generated by EasyCodeCube begin>*/
;;;715        //Forbid editing areas between the labels !!!
;;;716    	/*<Generated by EasyCodeCube end>*/	
;;;717    }
;;;718    #if defined (SC32f12xx)
                          ENDP


                          AREA ||i.SC_RCC_Init||, CODE, READONLY, ALIGN=2

                  SC_RCC_Init PROC
;;;49       */
;;;50     void SC_RCC_Init(void)
000000  b510              PUSH     {r4,lr}
;;;51     {
;;;52     	/*<Generated by EasyCodeCube begin>*/
;;;53         //Forbid editing areas between the labels !!!
;;;54     	RCC_Unlock(0xFF);
000002  20ff              MOVS     r0,#0xff
000004  f7fffffe          BL       RCC_Unlock
;;;55     	RCC_HXTCmd(DISABLE);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       RCC_HXTCmd
;;;56     	RCC_LXTCmd(DISABLE);
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       RCC_LXTCmd
;;;57     	RCC_LIRCCmd(ENABLE);
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       RCC_LIRCCmd
;;;58     	RCC_HIRCCmd(ENABLE);
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       RCC_HIRCCmd
;;;59     	/*INTEN*/RCC_ITConfig(ENABLE);
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       RCC_ITConfig
;;;60     	RCC_SYSCLKConfig(RCC_SYSCLKSource_HIRC);
000026  4806              LDR      r0,|L20.64|
000028  f7fffffe          BL       RCC_SYSCLKConfig
;;;61     	RCC_HCLKConfig(RCC_SYSCLK_Div1);
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       RCC_HCLKConfig
;;;62     	RCC_APB0Config(RCC_HCLK_Div1);
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       RCC_APB0Config
;;;63     	RCC_APB0Cmd(ENABLE);
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       RCC_APB0Cmd
;;;64     	/*<Generated by EasyCodeCube end>*/	
;;;65     }
00003e  bd10              POP      {r4,pc}
;;;66     
                          ENDP

                  |L20.64|
                          DCD      0x0000ff7f

                          AREA ||i.SC_SPI0_Init||, CODE, READONLY, ALIGN=1

                  SC_SPI0_Init PROC
;;;499      */
;;;500    void SC_SPI0_Init(void)
000000  4770              BX       lr
;;;501    {
;;;502    	/*<Generated by EasyCodeCube begin>*/
;;;503        //Forbid editing areas between the labels !!!
;;;504    	/*<Generated by EasyCodeCube end>*/		
;;;505    }
;;;506    
                          ENDP


                          AREA ||i.SC_SPI1_Init||, CODE, READONLY, ALIGN=1

                  SC_SPI1_Init PROC
;;;511      */
;;;512    void SC_SPI1_Init(void)
000000  4770              BX       lr
;;;513    {
;;;514    	/*<Generated by EasyCodeCube begin>*/
;;;515        //Forbid editing areas between the labels !!!
;;;516    	/*<Generated by EasyCodeCube end>*/		
;;;517    }
;;;518    #if defined (SC32f12xx)
                          ENDP


                          AREA ||i.SC_SYSTICK_Init||, CODE, READONLY, ALIGN=1

                  SC_SYSTICK_Init PROC
;;;71       */
;;;72     void SC_SYSTICK_Init(void)
000000  b510              PUSH     {r4,lr}
;;;73     {
;;;74     	/*<Generated by EasyCodeCube begin>*/
;;;75         //Forbid editing areas between the labels !!!
;;;76     	RCC_Unlock(0xFF);
000002  20ff              MOVS     r0,#0xff
000004  f7fffffe          BL       RCC_Unlock
;;;77     	RCC_SystickCLKConfig(RCC_SysTickSource_HCLK_DIV8);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       RCC_SystickCLKConfig
;;;78     	RCC_SystickSetCounter(16000);
00000e  207d              MOVS     r0,#0x7d
000010  01c0              LSLS     r0,r0,#7
000012  f7fffffe          BL       RCC_SystickSetCounter
;;;79     	NVIC_SetPriority(SysTick_IRQn,0);
000016  2100              MOVS     r1,#0
000018  1e48              SUBS     r0,r1,#1
00001a  f7fffffe          BL       __NVIC_SetPriority
;;;80     	RCC_SystickCmd(ENABLE);
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       RCC_SystickCmd
;;;81     	/*<Generated by EasyCodeCube end>*/
;;;82     }
000024  bd10              POP      {r4,pc}
;;;83     
                          ENDP


                          AREA ||i.SC_TIM0_Init||, CODE, READONLY, ALIGN=1

                  SC_TIM0_Init PROC
;;;262      */
;;;263    void SC_TIM0_Init(void)
000000  4770              BX       lr
;;;264    {
;;;265    	/*<Generated by EasyCodeCube begin>*/
;;;266        //Forbid editing areas between the labels !!!
;;;267    	/*<Generated by EasyCodeCube end>*/		
;;;268    }
;;;269    
                          ENDP


                          AREA ||i.SC_TIM1_Init||, CODE, READONLY, ALIGN=2

                  SC_TIM1_Init PROC
;;;274      */
;;;275    void SC_TIM1_Init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;276    {
000002  b085              SUB      sp,sp,#0x14
;;;277    	/*<Generated by EasyCodeCube begin>*/
;;;278        //Forbid editing areas between the labels !!!
;;;279    	RCC_APB0PeriphClockCmd(RCC_APB0Periph_TIM1,ENABLE);
000004  2101              MOVS     r1,#1
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       RCC_APB0PeriphClockCmd
;;;280    	/*Init Struct*/TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
;;;281    	TIM_TimeBaseInitStruct.TIM_WorkMode = TIM_WorkMode_Timer;
00000c  2400              MOVS     r4,#0
00000e  4668              MOV      r0,sp
000010  8044              STRH     r4,[r0,#2]
;;;282    	TIM_TimeBaseInitStruct.TIM_Prescaler = TIM_PRESCALER_1;
000012  8004              STRH     r4,[r0,#0]
;;;283    	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
;;;284    	TIM_TimeBaseInitStruct.TIM_Preload = 33536;
000014  2183              MOVS     r1,#0x83
000016  8084              STRH     r4,[r0,#4]            ;283
000018  0209              LSLS     r1,r1,#8
00001a  8101              STRH     r1,[r0,#8]
;;;285    	TIM_TimeBaseInitStruct.TIM_EXENX = TIM_EXENX_Disable;
;;;286    	TIM_TIMBaseInit(TIM1, &TIM_TimeBaseInitStruct);
00001c  4d26              LDR      r5,|L25.184|
00001e  80c4              STRH     r4,[r0,#6]            ;285
000020  4669              MOV      r1,sp
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       TIM_TIMBaseInit
;;;287    	/*Init Struct*/TIM_IC_InitTypeDef TIM_IC_InitStruct;
;;;288    	TIM_IC_InitStruct.TIM_RICPIN = TIM_RICPin_Disable;
000028  4668              MOV      r0,sp
00002a  8184              STRH     r4,[r0,#0xc]
;;;289    	TIM_IC_InitStruct.TIM_FICPIN = TIM_FICPin_Disable;
00002c  81c4              STRH     r4,[r0,#0xe]
;;;290    	TIM_ICInit(TIM1, &TIM_IC_InitStruct);
00002e  a903              ADD      r1,sp,#0xc
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       TIM_ICInit
;;;291    	TIM_ICCmd(TIM1, DISABLE);
000036  2100              MOVS     r1,#0
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       TIM_ICCmd
;;;292    	/*Init Struct*/TIM_PWM_InitTypeDef TIM_PWM_InitStruct;
;;;293    	TIM_PWM_InitStruct.TIM_PWMOutputChannl = TIM_PWMChannel_Less;
00003e  4668              MOV      r0,sp
000040  8204              STRH     r4,[r0,#0x10]
;;;294    	TIM_PWM_InitStruct.TIM_PWMLowPolarityChannl = TIM_PWMChannel_Less;
000042  8244              STRH     r4,[r0,#0x12]
;;;295    	TIM_PWMInit(TIM1, &TIM_PWM_InitStruct);
000044  a904              ADD      r1,sp,#0x10
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       TIM_PWMInit
;;;296    	TIM_PWMSetDuty(TIM1, TIM_PWMChannel_PWMA,50);
00004c  2232              MOVS     r2,#0x32
00004e  2102              MOVS     r1,#2
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       TIM_PWMSetDuty
;;;297    	/*INTEN*/TIM_ITConfig(TIM1,TIM_IT_INTEN, ENABLE);
000056  2201              MOVS     r2,#1
000058  4611              MOV      r1,r2
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       TIM_ITConfig
;;;298    	/*EXR*/TIM_ITConfig(TIM1,TIM_IT_EXR,DISABLE);
000060  2200              MOVS     r2,#0
000062  2104              MOVS     r1,#4
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       TIM_ITConfig
;;;299    	/*EXF*/TIM_ITConfig(TIM1,TIM_IT_EXF,DISABLE);
00006a  2200              MOVS     r2,#0
00006c  2108              MOVS     r1,#8
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       TIM_ITConfig
;;;300    	/*TI*/TIM_ITConfig(TIM1,TIM_IT_TI,ENABLE);
000074  2201              MOVS     r2,#1
000076  2102              MOVS     r1,#2
000078  4628              MOV      r0,r5
00007a  f7fffffe          BL       TIM_ITConfig
;;;301    	/*CAPR*/TIM_DMACmd(TIM1,TIM_DMAReq_CAPR,DISABLE);
00007e  2200              MOVS     r2,#0
000080  2120              MOVS     r1,#0x20
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       TIM_DMACmd
;;;302    	/*CAPF*/TIM_DMACmd(TIM1,TIM_DMAReq_CAPF,DISABLE);
000088  2200              MOVS     r2,#0
00008a  2140              MOVS     r1,#0x40
00008c  4628              MOV      r0,r5
00008e  f7fffffe          BL       TIM_DMACmd
;;;303    	TIM_DMACmd(TIM1,TIM_DMAReq_TI,DISABLE);
000092  2200              MOVS     r2,#0
000094  2110              MOVS     r1,#0x10
000096  4628              MOV      r0,r5
000098  f7fffffe          BL       TIM_DMACmd
;;;304    	/*Init Struct*/NVIC_SetPriority(TIMER1_IRQn,0);/*TIMER1*/
00009c  2100              MOVS     r1,#0
00009e  2010              MOVS     r0,#0x10
0000a0  f7fffffe          BL       __NVIC_SetPriority
;;;305    	NVIC_EnableIRQ(TIMER1_IRQn);
0000a4  2010              MOVS     r0,#0x10
0000a6  f7fffffe          BL       __NVIC_EnableIRQ
;;;306    	TIM_Cmd(TIM1,ENABLE);
0000aa  2101              MOVS     r1,#1
0000ac  4628              MOV      r0,r5
0000ae  f7fffffe          BL       TIM_Cmd
;;;307    	/*<Generated by EasyCodeCube end>*/	
;;;308    }
0000b2  b005              ADD      sp,sp,#0x14
0000b4  bd30              POP      {r4,r5,pc}
;;;309    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L25.184|
                          DCD      0x40020140

                          AREA ||i.SC_TIM2_Init||, CODE, READONLY, ALIGN=2

                  SC_TIM2_Init PROC
;;;314      */
;;;315    void SC_TIM2_Init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;316    {
000002  b085              SUB      sp,sp,#0x14
;;;317    	/*<Generated by EasyCodeCube begin>*/
;;;318        //Forbid editing areas between the labels !!!
;;;319    	RCC_APB0PeriphClockCmd(RCC_APB0Periph_TIM2,ENABLE);
000004  2101              MOVS     r1,#1
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       RCC_APB0PeriphClockCmd
;;;320    	/*Init Struct*/TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
;;;321    	TIM_TimeBaseInitStruct.TIM_WorkMode = TIM_WorkMode_Timer;
00000c  2400              MOVS     r4,#0
00000e  4668              MOV      r0,sp
;;;322    	TIM_TimeBaseInitStruct.TIM_Prescaler = TIM_PRESCALER_32;
000010  2105              MOVS     r1,#5
000012  8044              STRH     r4,[r0,#2]            ;321
000014  0209              LSLS     r1,r1,#8
000016  8001              STRH     r1,[r0,#0]
;;;323    	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
;;;324    	TIM_TimeBaseInitStruct.TIM_Preload = 64000;
000018  217d              MOVS     r1,#0x7d
00001a  8084              STRH     r4,[r0,#4]            ;323
00001c  0249              LSLS     r1,r1,#9
00001e  8101              STRH     r1,[r0,#8]
;;;325    	TIM_TimeBaseInitStruct.TIM_EXENX = TIM_EXENX_Disable;
;;;326    	TIM_TIMBaseInit(TIM2, &TIM_TimeBaseInitStruct);
000020  4d25              LDR      r5,|L26.184|
000022  80c4              STRH     r4,[r0,#6]            ;325
000024  4669              MOV      r1,sp
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       TIM_TIMBaseInit
;;;327    	/*Init Struct*/TIM_IC_InitTypeDef TIM_IC_InitStruct;
;;;328    	TIM_IC_InitStruct.TIM_RICPIN = TIM_RICPin_Disable;
00002c  4668              MOV      r0,sp
00002e  8184              STRH     r4,[r0,#0xc]
;;;329    	TIM_IC_InitStruct.TIM_FICPIN = TIM_FICPin_Disable;
000030  81c4              STRH     r4,[r0,#0xe]
;;;330    	TIM_ICInit(TIM2, &TIM_IC_InitStruct);
000032  a903              ADD      r1,sp,#0xc
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       TIM_ICInit
;;;331    	TIM_ICCmd(TIM2, DISABLE);
00003a  2100              MOVS     r1,#0
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       TIM_ICCmd
;;;332    	/*Init Struct*/TIM_PWM_InitTypeDef TIM_PWM_InitStruct;
;;;333    	TIM_PWM_InitStruct.TIM_PWMOutputChannl = TIM_PWMChannel_PWMA;
000042  2102              MOVS     r1,#2
000044  4668              MOV      r0,sp
000046  8201              STRH     r1,[r0,#0x10]
;;;334    	TIM_PWM_InitStruct.TIM_PWMLowPolarityChannl = TIM_PWMChannel_Less;
000048  8244              STRH     r4,[r0,#0x12]
;;;335    	TIM_PWMInit(TIM2, &TIM_PWM_InitStruct);
00004a  a904              ADD      r1,sp,#0x10
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       TIM_PWMInit
;;;336    	TIM_PinRemapConfig(TIM2, TIM_PinRemap_Default);
000052  2100              MOVS     r1,#0
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       TIM_PinRemapConfig
;;;337    	TIM_PWMSetDuty(TIM2, TIM_PWMChannel_PWMA,50);
00005a  2232              MOVS     r2,#0x32
00005c  2102              MOVS     r1,#2
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       TIM_PWMSetDuty
;;;338    	/*INTEN*/TIM_ITConfig(TIM2,TIM_IT_INTEN, ENABLE);
000064  2201              MOVS     r2,#1
000066  4611              MOV      r1,r2
000068  4628              MOV      r0,r5
00006a  f7fffffe          BL       TIM_ITConfig
;;;339    	/*EXR*/TIM_ITConfig(TIM2,TIM_IT_EXR,DISABLE);
00006e  2200              MOVS     r2,#0
000070  2104              MOVS     r1,#4
000072  4628              MOV      r0,r5
000074  f7fffffe          BL       TIM_ITConfig
;;;340    	/*EXF*/TIM_ITConfig(TIM2,TIM_IT_EXF,DISABLE);
000078  2200              MOVS     r2,#0
00007a  2108              MOVS     r1,#8
00007c  4628              MOV      r0,r5
00007e  f7fffffe          BL       TIM_ITConfig
;;;341    	/*TI*/TIM_ITConfig(TIM2,TIM_IT_TI,ENABLE);
000082  2201              MOVS     r2,#1
000084  2102              MOVS     r1,#2
000086  4628              MOV      r0,r5
000088  f7fffffe          BL       TIM_ITConfig
;;;342    	/*CAPR*/TIM_DMACmd(TIM2,TIM_DMAReq_CAPR,DISABLE);
00008c  2200              MOVS     r2,#0
00008e  2120              MOVS     r1,#0x20
000090  4628              MOV      r0,r5
000092  f7fffffe          BL       TIM_DMACmd
;;;343    	/*CAPF*/TIM_DMACmd(TIM2,TIM_DMAReq_CAPF,DISABLE);
000096  2200              MOVS     r2,#0
000098  2140              MOVS     r1,#0x40
00009a  4628              MOV      r0,r5
00009c  f7fffffe          BL       TIM_DMACmd
;;;344    	/*TI*/TIM_DMACmd(TIM2,TIM_DMAReq_TI,DISABLE);
0000a0  2200              MOVS     r2,#0
0000a2  2110              MOVS     r1,#0x10
0000a4  4628              MOV      r0,r5
0000a6  f7fffffe          BL       TIM_DMACmd
;;;345    	TIM_Cmd(TIM2,DISABLE);
0000aa  2100              MOVS     r1,#0
0000ac  4628              MOV      r0,r5
0000ae  f7fffffe          BL       TIM_Cmd
;;;346    	/*<Generated by EasyCodeCube end>*/	
;;;347    }
0000b2  b005              ADD      sp,sp,#0x14
0000b4  bd30              POP      {r4,r5,pc}
;;;348    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L26.184|
                          DCD      0x40020180

                          AREA ||i.SC_TIM3_Init||, CODE, READONLY, ALIGN=1

                  SC_TIM3_Init PROC
;;;353      */
;;;354    void SC_TIM3_Init(void)
000000  4770              BX       lr
;;;355    {
;;;356    	/*<Generated by EasyCodeCube begin>*/
;;;357        //Forbid editing areas between the labels !!!
;;;358    	/*<Generated by EasyCodeCube end>*/	
;;;359    }
;;;360    
                          ENDP


                          AREA ||i.SC_TIM4_Init||, CODE, READONLY, ALIGN=1

                  SC_TIM4_Init PROC
;;;365      */
;;;366    void SC_TIM4_Init(void)
000000  4770              BX       lr
;;;367    {
;;;368    	/*<Generated by EasyCodeCube begin>*/
;;;369        //Forbid editing areas between the labels !!!
;;;370    	/*<Generated by EasyCodeCube end>*/	
;;;371    }
;;;372    
                          ENDP


                          AREA ||i.SC_TIM5_Init||, CODE, READONLY, ALIGN=1

                  SC_TIM5_Init PROC
;;;377      */
;;;378    void SC_TIM5_Init(void)
000000  4770              BX       lr
;;;379    {
;;;380    	/*<Generated by EasyCodeCube begin>*/
;;;381        //Forbid editing areas between the labels !!!
;;;382    	/*<Generated by EasyCodeCube end>*/		
;;;383    }
;;;384    
                          ENDP


                          AREA ||i.SC_TIM6_Init||, CODE, READONLY, ALIGN=1

                  SC_TIM6_Init PROC
;;;389      */
;;;390    void SC_TIM6_Init(void)
000000  4770              BX       lr
;;;391    {
;;;392    	/*<Generated by EasyCodeCube begin>*/
;;;393        //Forbid editing areas between the labels !!!
;;;394    	/*<Generated by EasyCodeCube end>*/		
;;;395    }
;;;396    
                          ENDP


                          AREA ||i.SC_TIM7_Init||, CODE, READONLY, ALIGN=1

                  SC_TIM7_Init PROC
;;;401      */
;;;402    void SC_TIM7_Init(void)
000000  4770              BX       lr
;;;403    {
;;;404    	/*<Generated by EasyCodeCube begin>*/
;;;405        //Forbid editing areas between the labels !!!
;;;406    	/*<Generated by EasyCodeCube end>*/		
;;;407    }
;;;408    
                          ENDP


                          AREA ||i.SC_TWI0_Init||, CODE, READONLY, ALIGN=2

                  SC_TWI0_Init PROC
;;;538      */
;;;539    void SC_TWI0_Init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;540    {
000002  b088              SUB      sp,sp,#0x20
;;;541    	/*<Generated by EasyCodeCube begin>*/
;;;542        //Forbid editing areas between the labels !!!
;;;543    	/*GPIOInit_PA05 Struct*/GPIO_InitTypeDef GPIOInit_PA05_Struct;
;;;544    	GPIOInit_PA05_Struct.GPIO_Pin = GPIO_Pin_5;
000004  2120              MOVS     r1,#0x20
000006  4668              MOV      r0,sp
000008  8181              STRH     r1,[r0,#0xc]
;;;545    	GPIOInit_PA05_Struct.GPIO_Mode = GPIO_Mode_IN_PU;
00000a  2501              MOVS     r5,#1
00000c  81c5              STRH     r5,[r0,#0xe]
;;;546    	GPIOInit_PA05_Struct.GPIO_DriveLevel = 0;
00000e  2400              MOVS     r4,#0
;;;547    	GPIO_Init(GPIOA,&GPIOInit_PA05_Struct);/*SDA0B端口初始化*/
000010  4e1f              LDR      r6,|L32.144|
000012  8204              STRH     r4,[r0,#0x10]         ;546
000014  a903              ADD      r1,sp,#0xc
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       GPIO_Init
;;;548    	/*GPIOInit_PA06 Struct*/GPIO_InitTypeDef GPIOInit_PA06_Struct;
;;;549    	GPIOInit_PA06_Struct.GPIO_Pin = GPIO_Pin_6;
00001c  2140              MOVS     r1,#0x40
00001e  4668              MOV      r0,sp
000020  8281              STRH     r1,[r0,#0x14]
;;;550    	GPIOInit_PA06_Struct.GPIO_Mode = GPIO_Mode_IN_PU;
000022  82c5              STRH     r5,[r0,#0x16]
;;;551    	GPIOInit_PA06_Struct.GPIO_DriveLevel = 0;
000024  8304              STRH     r4,[r0,#0x18]
;;;552    	GPIO_Init(GPIOA,&GPIOInit_PA06_Struct);/*SCL0B端口初始化*/
000026  a905              ADD      r1,sp,#0x14
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       GPIO_Init
;;;553    	RCC_APB0PeriphClockCmd(RCC_APB0Periph_TWI0, ENABLE);
00002e  2101              MOVS     r1,#1
000030  2010              MOVS     r0,#0x10
000032  f7fffffe          BL       RCC_APB0PeriphClockCmd
;;;554    	/*Init Struct*/TWI_InitTypeDef TWI_InitStruct;
;;;555    	TWI_InitStruct.TWI_Ack = TWI_Ack_Enable;
000036  2102              MOVS     r1,#2
000038  4668              MOV      r0,sp
00003a  8001              STRH     r1,[r0,#0]
;;;556    	TWI_InitStruct.TWI_Prescaler = TWI_PRESCALER_2048;
00003c  01c9              LSLS     r1,r1,#7
00003e  8041              STRH     r1,[r0,#2]
;;;557    	TWI_InitStruct.TWI_Stretch = TWI_Stretch_Disable;
000040  8084              STRH     r4,[r0,#4]
;;;558    	TWI_InitStruct.TWI_SlaveAdress = 0x01;
;;;559    	TWI_InitStruct.TWI_GeneralCall = TWI_GeneralCall_Disable;
000042  9502              STR      r5,[sp,#8]
000044  80c4              STRH     r4,[r0,#6]
;;;560    	TWI_Init(TWI0, &TWI_InitStruct);
000046  4c13              LDR      r4,|L32.148|
000048  4669              MOV      r1,sp
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       TWI_Init
;;;561    	TWI_PinRemapConfig(TWI0,TWI_PinRemap_B);
000050  03e9              LSLS     r1,r5,#15
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       TWI_PinRemapConfig
;;;562    	/*INT*/TWI_ITConfig(TWI0,TWI_IT_INT,ENABLE);
000058  2201              MOVS     r2,#1
00005a  4611              MOV      r1,r2
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       TWI_ITConfig
;;;563    	/*DMA_TX*/TWI_DMACmd(TWI0,TWI_DMAReq_TX,DISABLE);
000062  2200              MOVS     r2,#0
000064  2180              MOVS     r1,#0x80
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       TWI_DMACmd
;;;564    	/*DMA_RX*/TWI_DMACmd(TWI0,TWI_DMAReq_RX,DISABLE);
00006c  2200              MOVS     r2,#0
00006e  2140              MOVS     r1,#0x40
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       TWI_DMACmd
;;;565    	/*Init Struct*/NVIC_SetPriority(TWI0_IRQn,3);/*TWI0*/
000076  2103              MOVS     r1,#3
000078  2017              MOVS     r0,#0x17
00007a  f7fffffe          BL       __NVIC_SetPriority
;;;566    	NVIC_EnableIRQ(TWI0_IRQn);
00007e  2017              MOVS     r0,#0x17
000080  f7fffffe          BL       __NVIC_EnableIRQ
;;;567    	TWI_Cmd(TWI0,ENABLE);
000084  2101              MOVS     r1,#1
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       TWI_Cmd
;;;568    	/*<Generated by EasyCodeCube end>*/		
;;;569    }
00008c  b008              ADD      sp,sp,#0x20
00008e  bd70              POP      {r4-r6,pc}
;;;570    
                          ENDP

                  |L32.144|
                          DCD      0x40011000
                  |L32.148|
                          DCD      0x40020060

                          AREA ||i.SC_TWI1_Init||, CODE, READONLY, ALIGN=1

                  SC_TWI1_Init PROC
;;;575      */
;;;576    void SC_TWI1_Init(void)
000000  4770              BX       lr
;;;577    {
;;;578    	/*<Generated by EasyCodeCube begin>*/
;;;579        //Forbid editing areas between the labels !!!
;;;580    	/*<Generated by EasyCodeCube end>*/		
;;;581    }
;;;582    
                          ENDP


                          AREA ||i.SC_UART0_Init||, CODE, READONLY, ALIGN=1

                  SC_UART0_Init PROC
;;;188      */
;;;189    void SC_UART0_Init(void)
000000  4770              BX       lr
;;;190    {
;;;191    	/*<Generated by EasyCodeCube begin>*/
;;;192        //Forbid editing areas between the labels !!!
;;;193    	/*<Generated by EasyCodeCube end>*/		
;;;194    }
;;;195    
                          ENDP


                          AREA ||i.SC_UART1_Init||, CODE, READONLY, ALIGN=1

                  SC_UART1_Init PROC
;;;200      */
;;;201    void SC_UART1_Init(void)
000000  4770              BX       lr
;;;202    {
;;;203    	/*<Generated by EasyCodeCube begin>*/
;;;204        //Forbid editing areas between the labels !!!
;;;205    	/*<Generated by EasyCodeCube end>*/		
;;;206    }
;;;207    
                          ENDP


                          AREA ||i.SC_UART2_Init||, CODE, READONLY, ALIGN=1

                  SC_UART2_Init PROC
;;;212      */
;;;213    void SC_UART2_Init(void)
000000  4770              BX       lr
;;;214    {
;;;215    	/*<Generated by EasyCodeCube begin>*/
;;;216        //Forbid editing areas between the labels !!!
;;;217    	/*<Generated by EasyCodeCube end>*/		
;;;218    }
;;;219    
                          ENDP


                          AREA ||i.SC_UART3_Init||, CODE, READONLY, ALIGN=1

                  SC_UART3_Init PROC
;;;224      */
;;;225    void SC_UART3_Init(void)
000000  4770              BX       lr
;;;226    {
;;;227    	/*<Generated by EasyCodeCube begin>*/
;;;228        //Forbid editing areas between the labels !!!
;;;229    	/*<Generated by EasyCodeCube end>*/		
;;;230    }
;;;231    #if defined (SC32f12xx)
                          ENDP


                          AREA ||i.SC_WDT_Init||, CODE, READONLY, ALIGN=1

                  SC_WDT_Init PROC
;;;663      */
;;;664    void SC_WDT_Init(void)
000000  4770              BX       lr
;;;665    {
;;;666    	/*<Generated by EasyCodeCube begin>*/
;;;667        //Forbid editing areas between the labels !!!
;;;668    	/*<Generated by EasyCodeCube end>*/	
;;;669    }
;;;670    
                          ENDP


                          AREA ||i.__NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  __NVIC_EnableIRQ PROC
;;;740     */
;;;741    __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;742    {
000002  db05              BLT      |L39.16|
;;;743      if ((int32_t)(IRQn) >= 0)
;;;744      {
;;;745        NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
000004  06c1              LSLS     r1,r0,#27
000006  0ec9              LSRS     r1,r1,#27
000008  2001              MOVS     r0,#1
00000a  4088              LSLS     r0,r0,r1
00000c  4901              LDR      r1,|L39.20|
00000e  6008              STR      r0,[r1,#0]
                  |L39.16|
;;;746      }
;;;747    }
000010  4770              BX       lr
;;;748    
                          ENDP

000012  0000              DCW      0x0000
                  |L39.20|
                          DCD      0xe000e100

                          AREA ||i.__NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  __NVIC_SetPriority PROC
;;;847     */
;;;848    __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  0783              LSLS     r3,r0,#30
;;;849    {
;;;850      if ((int32_t)(IRQn) >= 0)
;;;851      {
;;;852        NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
000002  22ff              MOVS     r2,#0xff
000004  0edb              LSRS     r3,r3,#27
000006  409a              LSLS     r2,r2,r3
000008  0789              LSLS     r1,r1,#30
00000a  0e09              LSRS     r1,r1,#24
00000c  4099              LSLS     r1,r1,r3
00000e  2800              CMP      r0,#0                 ;850
000010  db08              BLT      |L40.36|
000012  0883              LSRS     r3,r0,#2
000014  4809              LDR      r0,|L40.60|
000016  009b              LSLS     r3,r3,#2
000018  1818              ADDS     r0,r3,r0
00001a  6803              LDR      r3,[r0,#0]
00001c  4393              BICS     r3,r3,r2
00001e  430b              ORRS     r3,r3,r1
000020  6003              STR      r3,[r0,#0]
;;;853           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;854      }
;;;855      else
;;;856      {
;;;857        SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
;;;858           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;859      }
;;;860    }
000022  4770              BX       lr
                  |L40.36|
000024  0700              LSLS     r0,r0,#28             ;857
000026  0f00              LSRS     r0,r0,#28             ;857
000028  3808              SUBS     r0,r0,#8              ;857
00002a  0883              LSRS     r3,r0,#2              ;857
00002c  4804              LDR      r0,|L40.64|
00002e  009b              LSLS     r3,r3,#2              ;857
000030  1818              ADDS     r0,r3,r0              ;857
000032  69c3              LDR      r3,[r0,#0x1c]         ;857
000034  4393              BICS     r3,r3,r2              ;857
000036  430b              ORRS     r3,r3,r1              ;857
000038  61c3              STR      r3,[r0,#0x1c]         ;857
00003a  4770              BX       lr
;;;861    
                          ENDP

                  |L40.60|
                          DCD      0xe000e400
                  |L40.64|
                          DCD      0xe000ed00

;*** Start embedded assembler ***

#line 1 "..\\User\\SC_Init.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_SC_Init_c_SC_Init____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___9_SC_Init_c_SC_Init____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_SC_Init_c_SC_Init____REVSH|
#line 478
|__asm___9_SC_Init_c_SC_Init____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
