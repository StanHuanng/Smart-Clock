; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\output\rgb.o --asm_dir=..\List\ --list_dir=..\List\ --depend=..\output\rgb.d --cpu=Cortex-M0+ --apcs=interwork --diag_suppress=9931 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -IC:\Keil_v5\ARM\PACK\Keil\SC32F1xxx_DFP\1.0.6\Device\SC32F10xx\FWLib\SC32_Lib\inc -D__UVISION_VERSION=539 -DSC32F10xx -DSC32f10xx --omf_browse=..\output\rgb.crf ..\User\RGB.c]
                          THUMB

                          AREA ||i.RGB_SET||, CODE, READONLY, ALIGN=2

                  RGB_SET PROC
;;;7      
;;;8      void RGB_SET(int R,int G,int B)
000000  b570              PUSH     {r4-r6,lr}
;;;9      {
;;;10             PWM_SetDuty(PWM0,PWM_Channel_1,B);
000002  4c09              LDR      r4,|L1.40|
000004  460e              MOV      r6,r1                 ;9
000006  4605              MOV      r5,r0                 ;9
000008  b292              UXTH     r2,r2
00000a  2102              MOVS     r1,#2
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       PWM_SetDuty
;;;11             PWM_SetDuty(PWM0,PWM_Channel_2,G);
000012  b2b2              UXTH     r2,r6
000014  2104              MOVS     r1,#4
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       PWM_SetDuty
;;;12             PWM_SetDuty(PWM0,PWM_Channel_3,R);	
00001c  b2aa              UXTH     r2,r5
00001e  2108              MOVS     r1,#8
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       PWM_SetDuty
;;;13     }
000026  bd70              POP      {r4-r6,pc}
;;;14     
                          ENDP

                  |L1.40|
                          DCD      0x40020200

                          AREA ||i.RGB_choosemode||, CODE, READONLY, ALIGN=2

                  RGB_choosemode PROC
;;;59     
;;;60     void RGB_choosemode(void)//选择模式
000000  b510              PUSH     {r4,lr}
;;;61     {	
;;;62     	PWM_Cmd(PWM0,ENABLE);
000002  2101              MOVS     r1,#1
000004  480f              LDR      r0,|L2.68|
000006  f7fffffe          BL       PWM_Cmd
;;;63     
;;;64     	if(RGB_mode==0)
00000a  4c0f              LDR      r4,|L2.72|
00000c  6820              LDR      r0,[r4,#0]  ; RGB_mode
00000e  2800              CMP      r0,#0
000010  d00e              BEQ      |L2.48|
;;;65     	{
;;;66     		RGB_mode0();
;;;67     	}
;;;68     	else if(RGB_mode==1)
000012  2801              CMP      r0,#1
000014  d00f              BEQ      |L2.54|
;;;69     	{
;;;70     		RGB_mode1();
;;;71     	}
;;;72     		else if(RGB_mode==2)
000016  2802              CMP      r0,#2
000018  d010              BEQ      |L2.60|
;;;73     	{
;;;74     		RGB_mode2();
;;;75     	}
;;;76     		else 
;;;77     	{
;;;78     		RGB_mode3();
00001a  f7fffffe          BL       RGB_mode3
                  |L2.30|
;;;79     	}
;;;80     	RGB_mode%=4;
00001e  6820              LDR      r0,[r4,#0]  ; RGB_mode
000020  17c1              ASRS     r1,r0,#31
000022  0f89              LSRS     r1,r1,#30
000024  1809              ADDS     r1,r1,r0
000026  0889              LSRS     r1,r1,#2
000028  0089              LSLS     r1,r1,#2
00002a  1a40              SUBS     r0,r0,r1
;;;81     }
00002c  6020              STR      r0,[r4,#0]  ; RGB_mode
00002e  bd10              POP      {r4,pc}
                  |L2.48|
000030  f7fffffe          BL       RGB_mode0
000034  e7f3              B        |L2.30|
                  |L2.54|
000036  f7fffffe          BL       RGB_mode1
00003a  e7f0              B        |L2.30|
                  |L2.60|
00003c  f7fffffe          BL       RGB_mode2
000040  e7ed              B        |L2.30|
;;;82     
                          ENDP

000042  0000              DCW      0x0000
                  |L2.68|
                          DCD      0x40020200
                  |L2.72|
                          DCD      ||.data||

                          AREA ||i.RGB_mode0||, CODE, READONLY, ALIGN=1

                  RGB_mode0 PROC
;;;16     
;;;17     void RGB_mode0(void)//常亮为黄光
000000  b510              PUSH     {r4,lr}
;;;18     {
;;;19     	RGB_SET(200,500,800);
000002  2219              MOVS     r2,#0x19
000004  21ff              MOVS     r1,#0xff
000006  0152              LSLS     r2,r2,#5
000008  31f5              ADDS     r1,r1,#0xf5
00000a  20c8              MOVS     r0,#0xc8
00000c  f7fffffe          BL       RGB_SET
;;;20     }
000010  bd10              POP      {r4,pc}
;;;21     
                          ENDP


                          AREA ||i.RGB_mode1||, CODE, READONLY, ALIGN=1

                  RGB_mode1 PROC
;;;21     
;;;22     void RGB_mode1(void)//常亮为黄绿光
000000  b510              PUSH     {r4,lr}
;;;23     {
;;;24     	RGB_SET(0,0,900);
000002  22e1              MOVS     r2,#0xe1
000004  2100              MOVS     r1,#0
000006  0092              LSLS     r2,r2,#2
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       RGB_SET
;;;25     }
00000e  bd10              POP      {r4,pc}
;;;26     
                          ENDP


                          AREA ||i.RGB_mode2||, CODE, READONLY, ALIGN=1

                  RGB_mode2 PROC
;;;26     
;;;27     void RGB_mode2(void)//常亮为白（少蓝）光
000000  b510              PUSH     {r4,lr}
;;;28     {
;;;29     	//RGB_SET(300,500,700);
;;;30     //	RGB_SET(500,500,500);//蓝
;;;31     	RGB_SET(0,900,0);//更蓝
000002  2200              MOVS     r2,#0
000004  21e1              MOVS     r1,#0xe1
000006  0089              LSLS     r1,r1,#2
000008  4610              MOV      r0,r2
00000a  f7fffffe          BL       RGB_SET
;;;32     }
00000e  bd10              POP      {r4,pc}
;;;33     int RGB_Flag=0;
                          ENDP


                          AREA ||i.RGB_mode3||, CODE, READONLY, ALIGN=2

                  RGB_mode3 PROC
;;;34     extern int KeyNum;
;;;35     void RGB_mode3(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;36     {
;;;37     	if(RGB_Flag==0)
000002  4c19              LDR      r4,|L6.104|
;;;38     	{
;;;39     		RGB_SET(200,500,800);
000004  2619              MOVS     r6,#0x19
000006  25ff              MOVS     r5,#0xff
000008  6860              LDR      r0,[r4,#4]            ;37  ; RGB_Flag
00000a  0176              LSLS     r6,r6,#5
00000c  35f5              ADDS     r5,r5,#0xf5
00000e  2800              CMP      r0,#0                 ;37
000010  d104              BNE      |L6.28|
000012  4632              MOV      r2,r6
000014  4629              MOV      r1,r5
000016  20c8              MOVS     r0,#0xc8
000018  f7fffffe          BL       RGB_SET
                  |L6.28|
;;;40     	}
;;;41     	if(RGB_Flag==1)
00001c  6860              LDR      r0,[r4,#4]  ; RGB_Flag
00001e  2801              CMP      r0,#1
000020  d105              BNE      |L6.46|
;;;42     	{
;;;43     		RGB_SET(100,500,900);
000022  22e1              MOVS     r2,#0xe1
000024  0092              LSLS     r2,r2,#2
000026  4629              MOV      r1,r5
000028  2064              MOVS     r0,#0x64
00002a  f7fffffe          BL       RGB_SET
                  |L6.46|
;;;44     	}
;;;45     		if(RGB_Flag==2)
;;;46     	{
;;;47     		RGB_SET(300,500,700);
00002e  27ff              MOVS     r7,#0xff
000030  6860              LDR      r0,[r4,#4]            ;45  ; RGB_Flag
000032  372d              ADDS     r7,r7,#0x2d
000034  2802              CMP      r0,#2                 ;45
000036  d105              BNE      |L6.68|
000038  22af              MOVS     r2,#0xaf
00003a  0092              LSLS     r2,r2,#2
00003c  4629              MOV      r1,r5
00003e  4638              MOV      r0,r7
000040  f7fffffe          BL       RGB_SET
                  |L6.68|
;;;48     	}
;;;49     		if(RGB_Flag==3)
000044  6860              LDR      r0,[r4,#4]  ; RGB_Flag
000046  2803              CMP      r0,#3
000048  d104              BNE      |L6.84|
;;;50     	{
;;;51     		RGB_SET(500,500,500);
00004a  462a              MOV      r2,r5
00004c  4628              MOV      r0,r5
00004e  4611              MOV      r1,r2
000050  f7fffffe          BL       RGB_SET
                  |L6.84|
;;;52     	}
;;;53     		if(RGB_Flag==4)
000054  6860              LDR      r0,[r4,#4]  ; RGB_Flag
000056  2804              CMP      r0,#4
000058  d104              BNE      |L6.100|
;;;54     	{
;;;55     		RGB_SET(800,500,300);
00005a  463a              MOV      r2,r7
00005c  4629              MOV      r1,r5
00005e  4630              MOV      r0,r6
000060  f7fffffe          BL       RGB_SET
                  |L6.100|
;;;56     	}
;;;57     	
;;;58     }
000064  bdf8              POP      {r3-r7,pc}
;;;59     
                          ENDP

000066  0000              DCW      0x0000
                  |L6.104|
                          DCD      ||.data||

                          AREA ||i.RGB_off||, CODE, READONLY, ALIGN=2

                  RGB_off PROC
;;;82     
;;;83     void RGB_off(void)
000000  b510              PUSH     {r4,lr}
;;;84     {
;;;85     	PWM_Cmd(PWM0,DISABLE);
000002  2100              MOVS     r1,#0
000004  4801              LDR      r0,|L7.12|
000006  f7fffffe          BL       PWM_Cmd
;;;86     }
00000a  bd10              POP      {r4,pc}
                          ENDP

                  |L7.12|
                          DCD      0x40020200

                          AREA ||.data||, DATA, ALIGN=2

                  RGB_mode
                          DCD      0x00000000
                  RGB_Flag
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\User\\RGB.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_RGB_c_RGB_SET____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___5_RGB_c_RGB_SET____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_RGB_c_RGB_SET____REVSH|
#line 478
|__asm___5_RGB_c_RGB_SET____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
