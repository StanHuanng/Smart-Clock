; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\output\sc32f1xxx_pwm.o --asm_dir=..\List\ --list_dir=..\List\ --depend=..\output\sc32f1xxx_pwm.d --cpu=Cortex-M0+ --apcs=interwork --diag_suppress=9931 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -IC:\Keil_v5\ARM\PACK\Keil\SC32F1xxx_DFP\1.0.6\Device\SC32F10xx\FWLib\SC32_Lib\inc -D__UVISION_VERSION=539 -DSC32F10xx -DSC32f10xx --omf_browse=..\output\sc32f1xxx_pwm.crf ..\FWLib\SC32F1XXX_Lib\src\sc32f1xxx_pwm.c]
                          THUMB

                          AREA ||i.PWM_ClearFlag||, CODE, READONLY, ALIGN=1

                  PWM_ClearFlag PROC
;;;492     */
;;;493    void PWM_ClearFlag ( PWM_TypeDef* PWMx, uint16_t PWM_FLAG )
000000  6081              STR      r1,[r0,#8]
;;;494    {
;;;495        /* Check the parameters */
;;;496        assert_param ( IS_PWM_ALL_PERIPH ( PWMx ) );
;;;497        assert_param ( IS_GET_PWM_FLAG ( PWM_FLAG ) );
;;;498    
;;;499        /* Clear the flags */
;;;500        PWMx->PWM_STS = ( uint16_t ) PWM_FLAG;
;;;501    }
000002  4770              BX       lr
;;;502    
                          ENDP


                          AREA ||i.PWM_Cmd||, CODE, READONLY, ALIGN=2

                  PWM_Cmd PROC
;;;162     */
;;;163    void PWM_Cmd ( PWM_TypeDef* PWMx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;164    {
;;;165        /* Check the parameters */
;;;166        assert_param ( IS_PWM_ALL_PERIPH ( PWMx ) );
;;;167        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;168    
;;;169        if ( NewState != DISABLE )
;;;170        {
;;;171            /* Enable the PWM Counter */
;;;172            PWMx->PWM_CON |= PWM_CON_ENPWM;
;;;173        }
;;;174        else
;;;175        {
;;;176            /* Disable the PWM Counter */
;;;177            PWMx->PWM_CON &= ( uint16_t ) ~PWM_CON_ENPWM;
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L2.12|
000006  2280              MOVS     r2,#0x80              ;172
000008  4311              ORRS     r1,r1,r2              ;172
00000a  e001              B        |L2.16|
                  |L2.12|
00000c  4a01              LDR      r2,|L2.20|
00000e  4011              ANDS     r1,r1,r2
                  |L2.16|
000010  6001              STR      r1,[r0,#0]            ;172
;;;178        }
;;;179    }
000012  4770              BX       lr
;;;180    
                          ENDP

                  |L2.20|
                          DCD      0x0000ff7f

                          AREA ||i.PWM_DeInit||, CODE, READONLY, ALIGN=2

                  PWM_DeInit PROC
;;;31      */
;;;32     void PWM_DeInit ( PWM_TypeDef* PWMx )
000000  4906              LDR      r1,|L3.28|
;;;33     {
000002  b510              PUSH     {r4,lr}
;;;34         /* Check the parameters */
;;;35         assert_param ( IS_PWM_ALL_PERIPH ( PWMx ) );
;;;36     
;;;37         if ( PWMx == PWM0 )
000004  4288              CMP      r0,r1
000006  d108              BNE      |L3.26|
;;;38         {
;;;39             /* Enable PWM reset state */
;;;40             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_PWM0, ENABLE );
000008  1584              ASRS     r4,r0,#22
00000a  2101              MOVS     r1,#1
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       RCC_APB0PeriphResetCmd
;;;41             /* Enable PWM reset state */
;;;42             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_PWM0, DISABLE );
000012  2100              MOVS     r1,#0
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       RCC_APB0PeriphResetCmd
                  |L3.26|
;;;43         }
;;;44     }
00001a  bd10              POP      {r4,pc}
;;;45     
                          ENDP

                  |L3.28|
                          DCD      0x40020200

                          AREA ||i.PWM_FDCmd||, CODE, READONLY, ALIGN=2

                  PWM_FDCmd PROC
;;;393     */
;;;394    void PWM_FDCmd ( PWM_TypeDef* PWMx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;395    {
;;;396        /* Check the parameters */
;;;397        assert_param ( IS_PWM_ALL_PERIPH ( PWMx ) );
;;;398        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;399    
;;;400        if ( NewState != DISABLE )
;;;401        {
;;;402            /* Enable the PWM Fault Dectection */
;;;403            PWMx->PWM_FLT |= PWM_FLT_FLTEN;
;;;404        }
;;;405        else
;;;406        {
;;;407            /* Disable the PWM Fault Dectection */
;;;408            PWMx->PWM_FLT &= ( uint16_t ) ~PWM_FLT_FLTEN;
000002  6941              LDR      r1,[r0,#0x14]
000004  d002              BEQ      |L4.12|
000006  2280              MOVS     r2,#0x80              ;403
000008  4311              ORRS     r1,r1,r2              ;403
00000a  e001              B        |L4.16|
                  |L4.12|
00000c  4a01              LDR      r2,|L4.20|
00000e  4011              ANDS     r1,r1,r2
                  |L4.16|
000010  6141              STR      r1,[r0,#0x14]         ;403
;;;409        }
;;;410    }
000012  4770              BX       lr
;;;411    /**
                          ENDP

                  |L4.20|
                          DCD      0x0000ff7f

                          AREA ||i.PWM_FDInit||, CODE, READONLY, ALIGN=1

                  PWM_FDInit PROC
;;;375     */
;;;376    void PWM_FDInit ( PWM_TypeDef* PWMx, PWM_FDInitTypeDef* PWM_FDInitStruct )
000000  6942              LDR      r2,[r0,#0x14]
;;;377    {
;;;378        assert_param ( IS_PWM_ALL_PERIPH ( PWMx ) );
;;;379    
;;;380        PWMx->PWM_FLT &= ( uint32_t ) ~ ( PWM_FLT_FLTDT | PWM_FLT_FLTTV | PWM_FLT_FLTMD );
000002  2333              MOVS     r3,#0x33
000004  439a              BICS     r2,r2,r3
000006  6142              STR      r2,[r0,#0x14]
;;;381        PWMx->PWM_FLT |= ( uint32_t ) ( PWM_FDInitStruct->PWM_FDFilteringTime | PWM_FDInitStruct->PWM_FDMode |
000008  6942              LDR      r2,[r0,#0x14]
00000a  888b              LDRH     r3,[r1,#4]
00000c  431a              ORRS     r2,r2,r3
00000e  880b              LDRH     r3,[r1,#0]
000010  8849              LDRH     r1,[r1,#2]
000012  430b              ORRS     r3,r3,r1
000014  431a              ORRS     r2,r2,r3
000016  6142              STR      r2,[r0,#0x14]
;;;382                                        PWM_FDInitStruct->PWM_FDVoltage );
;;;383    }
000018  4770              BX       lr
;;;384    
                          ENDP


                          AREA ||i.PWM_FDStructInit||, CODE, READONLY, ALIGN=1

                  PWM_FDStructInit PROC
;;;360      */
;;;361    void PWM_FDStructInit ( PWM_FDInitTypeDef* PWM_FDInitStruct )
000000  2100              MOVS     r1,#0
;;;362    {
;;;363        /* Set the default configuration */
;;;364        PWM_FDInitStruct->PWM_FDFilteringTime = PWM_FilteringTime_0us;
000002  8081              STRH     r1,[r0,#4]
;;;365        PWM_FDInitStruct->PWM_FDMode = PWM_FDMode_Latch;
000004  8001              STRH     r1,[r0,#0]
;;;366        PWM_FDInitStruct->PWM_FDVoltage = PWM_FDVoltage_Low;
000006  8041              STRH     r1,[r0,#2]
;;;367    }
000008  4770              BX       lr
;;;368    
                          ENDP


                          AREA ||i.PWM_FallingDeadTimeConfig||, CODE, READONLY, ALIGN=1

                  PWM_FallingDeadTimeConfig PROC
;;;134     */
;;;135    void PWM_FallingDeadTimeConfig ( PWM_TypeDef* PWMx, uint8_t PWM_FallingDeadTime )
000000  6902              LDR      r2,[r0,#0x10]
;;;136    {
;;;137        uint32_t tmpreg;
;;;138        /* Check the parameters */
;;;139        assert_param ( IS_PWM_ALL_PERIPH ( PWMx ) );
;;;140    
;;;141        /* Get the PWMx PWM_DFR value */
;;;142        tmpreg = PWMx->PWM_DFR;
;;;143    
;;;144        /* Clear PDF bits */
;;;145        tmpreg &= ( uint32_t ) ~ ( PWM_DFR_PDF );
000002  230f              MOVS     r3,#0xf
000004  021b              LSLS     r3,r3,#8
000006  439a              BICS     r2,r2,r3
;;;146    
;;;147        /* Set PDF bits to Rising Dead Time value */
;;;148        tmpreg |= ( uint32_t ) ( PWM_FallingDeadTime << PWM_DFR_PDF_Pos );
000008  0209              LSLS     r1,r1,#8
00000a  4311              ORRS     r1,r1,r2
;;;149    
;;;150        /* Write to PWMx PWM_DFR */
;;;151        PWMx->PWM_DFR = tmpreg;
00000c  6101              STR      r1,[r0,#0x10]
;;;152    }
00000e  4770              BX       lr
;;;153    
                          ENDP


                          AREA ||i.PWM_GetCycle||, CODE, READONLY, ALIGN=1

                  PWM_GetCycle PROC
;;;254     */
;;;255    uint16_t PWM_GetCycle ( PWM_TypeDef* PWMx )
000000  6980              LDR      r0,[r0,#0x18]
;;;256    {
;;;257        /* Check the parameters */
;;;258        assert_param ( IS_PWM_ALL_PERIPH ( PWMx ) );
;;;259    
;;;260        /* Get the ReloadData Register value */
;;;261        return ( uint16_t ) PWMx->PWM_CYCLE;
000002  b280              UXTH     r0,r0
;;;262    }
000004  4770              BX       lr
;;;263    
                          ENDP


                          AREA ||i.PWM_GetDuty||, CODE, READONLY, ALIGN=1

                  PWM_GetDuty PROC
;;;317     */
;;;318    uint16_t PWM_GetDuty ( PWM_TypeDef* PWMx, PWM_Channel_Typedef PWM_Channel )
000000  b510              PUSH     {r4,lr}
;;;319    {
;;;320        uint8_t tmpvalue ;
;;;321        uint32_t tmpchannel;
;;;322        /* Check the parameters */
;;;323        assert_param ( IS_PWM_ALL_PERIPH ( PWMx ) );
;;;324        assert_param ( IS_PWM_CHANNEL ( PWM_Channel ) );
;;;325    
;;;326        tmpchannel = 1;
000002  2301              MOVS     r3,#1
000004  460c              MOV      r4,r1                 ;319
;;;327        for ( tmpvalue = 0; tmpvalue < 8; tmpvalue++ )
000006  2200              MOVS     r2,#0
                  |L9.8|
;;;328        {
;;;329            if ( ( uint32_t ) PWM_Channel & tmpchannel )
000008  421c              TST      r4,r3
00000a  d004              BEQ      |L9.22|
;;;330            {
;;;331                return ( uint16_t ) ( PWMx->PWM_DT[tmpvalue] );
00000c  0091              LSLS     r1,r2,#2
00000e  1808              ADDS     r0,r1,r0
000010  6b00              LDR      r0,[r0,#0x30]
000012  b280              UXTH     r0,r0
;;;332            }
;;;333            tmpchannel = tmpchannel << 1;
;;;334        }
;;;335        return 0;
;;;336    }
000014  bd10              POP      {r4,pc}
                  |L9.22|
000016  1c52              ADDS     r2,r2,#1              ;333
000018  005b              LSLS     r3,r3,#1              ;333
00001a  b2d2              UXTB     r2,r2                 ;327
00001c  2a08              CMP      r2,#8                 ;327
00001e  d3f3              BCC      |L9.8|
000020  2000              MOVS     r0,#0                 ;335
000022  bd10              POP      {r4,pc}
;;;337    
                          ENDP


                          AREA ||i.PWM_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  PWM_GetFlagStatus PROC
;;;465     */
;;;466    FlagStatus PWM_GetFlagStatus ( PWM_TypeDef* PWMx, uint16_t PWM_FLAG )
000000  4602              MOV      r2,r0
;;;467    {
;;;468        ITStatus bitstatus = RESET;
;;;469        /* Check the parameters */
;;;470        assert_param ( IS_PWM_ALL_PERIPH ( PWMx ) );
;;;471        assert_param ( IS_PWM_FLAG ( PWM_FLAG ) );
;;;472    
;;;473        if ( ( PWMx->PWM_STS & PWM_FLAG ) != ( uint16_t ) RESET )
000002  6892              LDR      r2,[r2,#8]
000004  2000              MOVS     r0,#0                 ;468
000006  420a              TST      r2,r1
000008  d000              BEQ      |L10.12|
;;;474        {
;;;475            bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L10.12|
;;;476        }
;;;477        else
;;;478        {
;;;479            bitstatus = RESET;
;;;480        }
;;;481        return bitstatus;
;;;482    }
00000c  4770              BX       lr
;;;483    
                          ENDP


                          AREA ||i.PWM_GetPrescaler||, CODE, READONLY, ALIGN=1

                  PWM_GetPrescaler PROC
;;;222     */
;;;223    PWM_Prescaler_TypeDef PWM_GetPrescaler ( PWM_TypeDef* PWMx )
000000  6800              LDR      r0,[r0,#0]
;;;224    {
;;;225        /* Check the parameters */
;;;226        assert_param ( IS_PWM_ALL_PERIPH ( PWMx ) );
;;;227    
;;;228        /* Get the CKD value */
;;;229        return ( PWM_Prescaler_TypeDef ) ( PWMx->PWM_CON & PWM_CON_PWMCLK );
000002  0700              LSLS     r0,r0,#28
000004  0f00              LSRS     r0,r0,#28
;;;230    }
000006  4770              BX       lr
;;;231    
                          ENDP


                          AREA ||i.PWM_ITConfig||, CODE, READONLY, ALIGN=1

                  PWM_ITConfig PROC
;;;436     */
;;;437    void PWM_ITConfig ( PWM_TypeDef* PWMx, uint16_t PWM_IT, FunctionalState NewState )
000000  2a00              CMP      r2,#0
;;;438    {
;;;439        /* Check the parameters */
;;;440        assert_param ( IS_PWM_ALL_PERIPH ( PWMx ) );
;;;441        assert_param ( IS_PWM_IT ( PWM_IT ) );
;;;442        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;443    
;;;444        if ( NewState != DISABLE )
;;;445        {
;;;446            /* Enable the Interrupt sources */
;;;447            PWMx->PWM_CON |= PWM_IT;
;;;448        }
;;;449        else
;;;450        {
;;;451            /* Disable the Interrupt sources */
;;;452            PWMx->PWM_CON &= ( uint16_t ) ~PWM_IT;
000002  6802              LDR      r2,[r0,#0]
000004  d001              BEQ      |L12.10|
000006  430a              ORRS     r2,r2,r1              ;447
000008  e002              B        |L12.16|
                  |L12.10|
00000a  43c9              MVNS     r1,r1
00000c  b289              UXTH     r1,r1
00000e  400a              ANDS     r2,r2,r1
                  |L12.16|
000010  6002              STR      r2,[r0,#0]            ;447
;;;453        }
;;;454    }
000012  4770              BX       lr
;;;455    
                          ENDP


                          AREA ||i.PWM_Init||, CODE, READONLY, ALIGN=1

                  PWM_Init PROC
;;;69      */
;;;70     void PWM_Init ( PWM_TypeDef* PWMx, PWM_InitTypeDef* PWM_InitStruct )
000000  b510              PUSH     {r4,lr}
;;;71     {
;;;72         uint32_t tmpreg;
;;;73         /* Check the parameters */
;;;74         assert_param ( IS_PWM_COMPLEMENTARY_PERIPH ( PWMx ) );
;;;75     
;;;76         /*---------------------------- PWMx PWM_CON Configuration ------------------------*/
;;;77         /* Get the PWMx PWM_CON value */
;;;78         tmpreg = PWMx->PWM_CON;
000002  6802              LDR      r2,[r0,#0]
;;;79         /* Clear PWMCLK, PWMMD0 and PWMMD1 SPR bits */
;;;80         tmpreg &= ( uint32_t ) ~ ( PWM_CON_PWMCLK | PWM_CON_PWMMD0 | PWM_CON_PWMMD1 );
000004  236f              MOVS     r3,#0x6f
000006  439a              BICS     r2,r2,r3
;;;81         /* Configure PWMx: Prescaler, AlignedMode and WorkMode */
;;;82         /* Set PWMCLK bits according to Prescaler value */
;;;83         /* Set PWMMD0 bit according to AlignedMode value */
;;;84         /* Set PWMMD1 bit according to WorkMode value */
;;;85         tmpreg |= ( uint32_t ) ( PWM_InitStruct->PWM_Prescaler | PWM_InitStruct->PWM_AlignedMode |
000008  880b              LDRH     r3,[r1,#0]
00000a  884c              LDRH     r4,[r1,#2]
00000c  4323              ORRS     r3,r3,r4
00000e  888c              LDRH     r4,[r1,#4]
000010  4314              ORRS     r4,r4,r2
000012  4323              ORRS     r3,r3,r4
;;;86                                  PWM_InitStruct->PWM_WorkMode );
;;;87     
;;;88         /* Write to PWMx PWM_CON */
;;;89         PWMx->PWM_CON = tmpreg;
000014  6003              STR      r3,[r0,#0]
;;;90     
;;;91         /* Write to PWMx PWM_CHN */
;;;92         PWMx->PWM_CHN = PWM_InitStruct->PWM_OutputChannel;
000016  688a              LDR      r2,[r1,#8]
000018  6042              STR      r2,[r0,#4]
;;;93     
;;;94         /* Write to PWMx PWM_INV */
;;;95         PWMx->PWM_INV = PWM_InitStruct->PWM_LowPolarityChannl;
00001a  68ca              LDR      r2,[r1,#0xc]
00001c  60c2              STR      r2,[r0,#0xc]
;;;96     
;;;97         /* Write to PWMx PWM_CYCLE */
;;;98         PWMx->PWM_CYCLE = PWM_InitStruct->PWM_Cycle;
00001e  88c9              LDRH     r1,[r1,#6]
000020  6181              STR      r1,[r0,#0x18]
;;;99     }
000022  bd10              POP      {r4,pc}
;;;100    
                          ENDP


                          AREA ||i.PWM_RisingDeadTimeConfig||, CODE, READONLY, ALIGN=1

                  PWM_RisingDeadTimeConfig PROC
;;;108     */
;;;109    void PWM_RisingDeadTimeConfig ( PWM_TypeDef* PWMx, uint8_t PWM_RisingDeadTime )
000000  6902              LDR      r2,[r0,#0x10]
;;;110    {
;;;111        uint32_t tmpreg;
;;;112        /* Check the parameters */
;;;113        assert_param ( IS_PWM_COMPLEMENTARY_PERIPH ( PWMx ) );
;;;114    
;;;115        /* Get the PWMx PWM_DFR value */
;;;116        tmpreg = PWMx->PWM_DFR;
;;;117    
;;;118        /* Clear PDR bits */
;;;119        tmpreg &= ( uint32_t ) ~ ( PWM_DFR_PDR );
000002  0912              LSRS     r2,r2,#4
000004  0112              LSLS     r2,r2,#4
;;;120    
;;;121        /* Set PDR bits to Rising Dead Time value */
;;;122        tmpreg |= ( uint32_t ) ( PWM_RisingDeadTime << PWM_DFR_PDR_Pos );
000006  430a              ORRS     r2,r2,r1
;;;123    
;;;124        /* Write to PWMx PWM_DFR */
;;;125        PWMx->PWM_DFR = tmpreg;
000008  6102              STR      r2,[r0,#0x10]
;;;126    }
00000a  4770              BX       lr
;;;127    
                          ENDP


                          AREA ||i.PWM_SetCycle||, CODE, READONLY, ALIGN=1

                  PWM_SetCycle PROC
;;;239     */
;;;240    void PWM_SetCycle ( PWM_TypeDef* PWMx, uint32_t PWM_Cycle )
000000  6181              STR      r1,[r0,#0x18]
;;;241    {
;;;242        /* Check the parameters */
;;;243        assert_param ( IS_PWM_ALL_PERIPH ( PWMx ) );
;;;244    
;;;245        /* Set the ReloadData Register value */
;;;246        PWMx->PWM_CYCLE = PWM_Cycle;
;;;247    }
000002  4770              BX       lr
;;;248    
                          ENDP


                          AREA ||i.PWM_SetDuty||, CODE, READONLY, ALIGN=1

                  PWM_SetDuty PROC
;;;281     */
;;;282    void PWM_SetDuty ( PWM_TypeDef* PWMx, PWM_Channel_Typedef PWM_Channel, uint16_t PWM_Duty )
000000  b530              PUSH     {r4,r5,lr}
;;;283    {
;;;284        uint8_t tmpvalue;
;;;285        uint32_t tmpchannel;
;;;286        /* Check the parameters */
;;;287        assert_param ( IS_PWM_ALL_PERIPH ( PWMx ) );
;;;288        assert_param ( IS_PWM_CHANNEL ( PWM_Channel ) );
;;;289    
;;;290        tmpchannel = 1;
000002  2401              MOVS     r4,#1
;;;291        for ( tmpvalue = 0; tmpvalue < 8; tmpvalue++ )
000004  2300              MOVS     r3,#0
                  |L16.6|
;;;292        {
;;;293            if ( ( uint32_t ) PWM_Channel & tmpchannel )
000006  4221              TST      r1,r4
000008  d002              BEQ      |L16.16|
;;;294            {
;;;295                PWMx->PWM_DT[tmpvalue] = PWM_Duty;
00000a  009d              LSLS     r5,r3,#2
00000c  182d              ADDS     r5,r5,r0
00000e  632a              STR      r2,[r5,#0x30]
                  |L16.16|
;;;296            }
;;;297            tmpchannel = tmpchannel << 1;
000010  1c5b              ADDS     r3,r3,#1
000012  0064              LSLS     r4,r4,#1
000014  b2db              UXTB     r3,r3                 ;291
000016  2b08              CMP      r3,#8                 ;291
000018  d3f5              BCC      |L16.6|
;;;298        }
;;;299    }
00001a  bd30              POP      {r4,r5,pc}
;;;300    
                          ENDP


                          AREA ||i.PWM_SetPrescaler||, CODE, READONLY, ALIGN=2

                  PWM_SetPrescaler PROC
;;;195     */
;;;196    void PWM_SetPrescaler ( PWM_TypeDef* PWMx, PWM_Prescaler_TypeDef PWM_Prescaler )
000000  6802              LDR      r2,[r0,#0]
;;;197    {
;;;198        /* Check the parameters */
;;;199        assert_param ( IS_PWM_ALL_PERIPH ( PWMx ) );
;;;200        assert_param ( IS_PWM_PRESCALER ( PWM_Prescaler ) );
;;;201    
;;;202        /* Reset the CKD Bits */
;;;203        PWMx->PWM_CON &= ( uint16_t ) ~ ( PWM_CON_PWMCLK );
000002  4b03              LDR      r3,|L17.16|
000004  401a              ANDS     r2,r2,r3
000006  6002              STR      r2,[r0,#0]
;;;204    
;;;205        /* Set the CKD value */
;;;206        PWMx->PWM_CON |= PWM_Prescaler;
000008  6802              LDR      r2,[r0,#0]
00000a  430a              ORRS     r2,r2,r1
00000c  6002              STR      r2,[r0,#0]
;;;207    }
00000e  4770              BX       lr
;;;208    
                          ENDP

                  |L17.16|
                          DCD      0x0000fff0

                          AREA ||i.PWM_StructInit||, CODE, READONLY, ALIGN=1

                  PWM_StructInit PROC
;;;50       */
;;;51     void PWM_StructInit ( PWM_InitTypeDef* PWM_InitStruct )
000000  2100              MOVS     r1,#0
;;;52     {
;;;53         /* Set the default configuration */
;;;54         PWM_InitStruct->PWM_AlignedMode = PWM_AlignmentMode_Edge;
000002  8041              STRH     r1,[r0,#2]
;;;55         PWM_InitStruct->PWM_Cycle = 0x0000;
000004  80c1              STRH     r1,[r0,#6]
;;;56         PWM_InitStruct->PWM_LowPolarityChannl = PWMChannel_Less;
;;;57         PWM_InitStruct->PWM_OutputChannel = PWMChannel_Less;
000006  60c1              STR      r1,[r0,#0xc]
;;;58         PWM_InitStruct->PWM_Prescaler = PWM_PRESCALER_DIV1;
000008  6081              STR      r1,[r0,#8]
00000a  8001              STRH     r1,[r0,#0]
;;;59         PWM_InitStruct->PWM_WorkMode = PWM_WorkMode_Independent;
00000c  8081              STRH     r1,[r0,#4]
;;;60     }
00000e  4770              BX       lr
;;;61     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\FWLib\\SC32F1XXX_Lib\\src\\sc32f1xxx_pwm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_sc32f1xxx_pwm_c_a9b1a8f2____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___15_sc32f1xxx_pwm_c_a9b1a8f2____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_sc32f1xxx_pwm_c_a9b1a8f2____REVSH|
#line 478
|__asm___15_sc32f1xxx_pwm_c_a9b1a8f2____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
